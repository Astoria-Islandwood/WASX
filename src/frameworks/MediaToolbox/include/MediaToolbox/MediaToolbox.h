/*
 This file is part of Darling.

 Copyright (C) 2019 Lubos Dolezel

 Darling is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Darling is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Darling.  If not, see <http://www.gnu.org/licenses/>.
*/


#ifndef _MediaToolbox_H_
#define _MediaToolbox_H_

#import <Foundation/Foundation.h>

#import <MediaToolbox/CALayerDelegate.h>
#import <MediaToolbox/FigPiPableLayer.h>
#import <MediaToolbox/NSURLSessionDataDelegate.h>
#import <MediaToolbox/NSURLSessionDelegate.h>
#import <MediaToolbox/FigCaptionLayerPrivate.h>
#import <MediaToolbox/FigCaptionLayer.h>
#import <MediaToolbox/FigCaptionRowLayer.h>
#import <MediaToolbox/FigNeroLayer.h>
#import <MediaToolbox/FigNSURLSession.h>
#import <MediaToolbox/FigNSURLSessionRegistry.h>
#import <MediaToolbox/FigHTTPRequestSessionDataDelegate.h>
#import <MediaToolbox/FPSupport_PowerStateSingleton.h>
#import <MediaToolbox/FPSupport_VideoRangeSingleton.h>
#import <MediaToolbox/FigFCRCALayerOutputNodeContentLayer.h>
#import <MediaToolbox/FigFCRCALayerOutputNodeLayer.h>
#import <MediaToolbox/FigCaptionBackdropLayer.h>
#import <MediaToolbox/FigFCRCALayer.h>
#import <MediaToolbox/FigSubtitleWebVTTCueCALayer.h>
#import <MediaToolbox/FigSubtitleBackdropCALayerContentLayer.h>
#import <MediaToolbox/FigSubtitleBackdropCALayer.h>
#import <MediaToolbox/FigCDSCALayer.h>
#import <MediaToolbox/FigBaseCALayer.h>
#import <MediaToolbox/FigBaseCALayerHost.h>
#import <MediaToolbox/FigDisplaySleepAssertion.h>
#import <MediaToolbox/FigSubtitleCALayer.h>
#import <MediaToolbox/FigVideoContainerLayer.h>
#import <MediaToolbox/FigVideoLayerInternal.h>
#import <MediaToolbox/FigVideoLayer.h>
#import <MediaToolbox/FigCDSCALayerOutputNodeContentLayer.h>
#import <MediaToolbox/FigCDSCALayerOutputNodeLayer.h>
#import <MediaToolbox/FigCPEFPAirPlaySession.h>
#import <MediaToolbox/FigSubtitleWebVTTRegionCALayer.h>

void* AudioMentorDispose(void);
void* AudioMentorInvalidate(void);
void* AudioMentorNew(void);
void* AudioMentorSetClientPID(void);
void* AudioMentorSetModeToDoNothing(void);
void* AudioMentorSetModeToEmptyEdit(void);
void* AudioMentorSetModeToForwardPlayback(void);
void* AudioMentorSetModeToReversePlayback(void);
void* AudioMentorSetThrottleForBackground(void);
void* AudioMentorSetTimeRemapCallback(void);
void* DeMoofMovieFile(void);
void* EditMentorDispose(void);
void* EditMentorNewWithChildAudioMentor(void);
void* EditMentorNewWithChildAudioMentorAndSingleEditSegment(void);
void* EditMentorNewWithChildEditMentor(void);
void* EditMentorNewWithChildEditMentorAndSingleEditSegment(void);
void* EditMentorNewWithChildVideoMentor(void);
void* EditMentorNewWithMentorCallbacks(void);
void* EditMentorSetDebugName(void);
void* EditMentorSetModeToDoNothing(void);
void* EditMentorSetModeToEmptyEdit(void);
void* EditMentorSetModeToForwardPlayback(void);
void* EditMentorSetModeToReversePlayback(void);
void* EditMentorSetModeToScrub(void);
void* EditMentorSetProperty(void);
void* EditMentorSetTimeRemapCallback(void);
void* ExtraPrivatePlayerBeginInterruption(void);
void* ExtraPrivatePlayerCopyProperty(void);
void* ExtraPrivatePlayerEndInterruption(void);
void* ExtraPrivatePlayerGetNotificationCenter(void);
void* ExtraPrivatePlayerSetProperty(void);
void* FCSupport_CopyChapterTimeRangesForChapterGroup(void);
void* FCSupport_CopyChapterTimesForChapterGroup(void);
void* FPSupport_CopyCAContext(void);
void* FPSupport_CopyDestinationPixelBufferAttributesWithIOSurfaceSupport(void);
void* FPSupport_CopyMainDisplayCAName(void);
void* FPSupport_CopyMainDisplayCGDisplayID(void);
void* FPSupport_CreateAllVideoRangesSupportedByDisplays(void);
void* FPSupport_CreateDestinationPixelBufferAttributes(void);
void* FPSupport_DeleteCASlot(void);
void* FPSupport_DeleteCASlotsInArray(void);
void* FPSupport_EnsureCAImageQueue(void);
void* FPSupport_ForceVideoRangeDisplayChangeNotification(void);
void* FPSupport_GetBestDisplayInfoForDisplay(void);
void* FPSupport_GetClosestCommonRefreshIntervalForRate(void);
void* FPSupport_GetCurrentDisplayModeVideoRangeAndSizeAndFrameRate(void);
void* FPSupport_GetDefaultTrackIDForMediaType(void);
void* FPSupport_GetDisplayInfoForCADisplay(void);
void* FPSupport_GetDisplayRefreshInformation(void);
void* FPSupport_GetDisplayVideoRangeNotificationSingleton(void);
void* FPSupport_GetFirstEnabledTrackIDForMediaType(void);
void* FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate(void);
void* FPSupport_GetModeString(void);
void* FPSupport_GetVideoRangeForCoreDisplay(void);
void* FPSupport_IsExternalDisplay(void);
void* FVDUtilsCreateDisplayUUID(void);
void* FVDUtilsH264DecoderSupports444(void);
void* FVDUtilsH264EncoderSupports1080p60(void);
void* FVDUtilsH264EncoderSupports444(void);
void* FVDUtilsH264EncoderSupports4K30(void);
void* FVDUtilsH264EncoderSupportsBGRA(void);
void* FVDUtilsH264EncoderSupportsScaling(void);
void* FVDUtilsHEVCDecodeSupported(void);
void* FVDUtilsHEVCEncoderPreferred(void);
void* FVDUtilsHEVCEncoderSupports44410(void);
void* FVDUtilsHEVCEncoderSupports4K60(void);
void* FVDUtilsMainDisplaySupportsExtendedColor(void);
void* FigActivitySchedulerCreateForNewThread(void);
void* FigActivitySchedulerGetClassID(void);
void* FigActivitySchedulerGetFigBaseObject(void);
void* FigActivitySchedulerGetTypeID(void);
void* FigAirPlaySecureStopRouterFinalizeRecordAndCommitToDisk(void);
void* FigAlternateAllowedCPCFilterCreate(void);
void* FigAlternateContinuousFramesOnlyFilterCreate(void);
void* FigAlternateCopyAlternateDictionary(void);
void* FigAlternateCreate(void);
void* FigAlternateCreateDescriptionString(void);
void* FigAlternateFilterCopyFiltered(void);
void* FigAlternateFilterGetClassID(void);
void* FigAlternateFilterGetTypeID(void);
void* FigAlternateFilterInsert(void);
void* FigAlternateFrameRateCapFilterCreate(void);
void* FigAlternateGetAllowedCPC(void);
void* FigAlternateGetAlternateIndex(void);
void* FigAlternateGetAudioChannelCount(void);
void* FigAlternateGetAudioGroupIDString(void);
void* FigAlternateGetAudioGroupLocatorMap(void);
void* FigAlternateGetAverageBitRate(void);
void* FigAlternateGetBestAudioFormat(void);
void* FigAlternateGetBestVideoFormat(void);
void* FigAlternateGetCacheLookupIdentifier(void);
void* FigAlternateGetClassID(void);
void* FigAlternateGetClosedCaptionGroupIDString(void);
void* FigAlternateGetClosedCaptionGroupLocatorMap(void);
void* FigAlternateGetCodecString(void);
void* FigAlternateGetCurrentErrorCategory(void);
void* FigAlternateGetDeclaredAudioChannelCount(void);
void* FigAlternateGetFrameRate(void);
void* FigAlternateGetHDCPLevel(void);
void* FigAlternateGetHDCPString(void);
void* FigAlternateGetLastKnownValueForIsFullyCached(void);
void* FigAlternateGetNormalizedPeakBitrate(void);
void* FigAlternateGetPeakBitRate(void);
void* FigAlternateGetPlaylistAlternateKeyURL(void);
void* FigAlternateGetRankingScore(void);
void* FigAlternateGetRankingScoreOrAverageBWWithVideoCodecScore(void);
void* FigAlternateGetRankingScoreOrPeakBWWithVideoCodecScore(void);
void* FigAlternateGetRenditionInfoForMediaType(void);
void* FigAlternateGetResolution(void);
void* FigAlternateGetStableStreamIdentifier(void);
void* FigAlternateGetStableStreamIdentifierForMediaSubstream(void);
void* FigAlternateGetStartupScore(void);
void* FigAlternateGetSubtitleGroupIDString(void);
void* FigAlternateGetSubtitleGroupLocatorMap(void);
void* FigAlternateGetTypeID(void);
void* FigAlternateGetURLForCacheLookup(void);
void* FigAlternateGetVariantBitrateRank(void);
void* FigAlternateGetVideoFormatLoggingStringFromVideoFormat(void);
void* FigAlternateGetVideoGroupIDString(void);
void* FigAlternateGetVideoGroupLocatorMap(void);
void* FigAlternateGetVideoQualityIndex(void);
void* FigAlternateGetVideoRange(void);
void* FigAlternateGetVideoRangeString(void);
void* FigAlternateGetVideoRangeStringFromVideoRange(void);
void* FigAlternateHDCPFilterCreate(void);
void* FigAlternateHasAudio(void);
void* FigAlternateHasAudioDeclared(void);
void* FigAlternateHasAudioFormat(void);
void* FigAlternateHasUndeclaredVideo(void);
void* FigAlternateHasUnknownCodecs(void);
void* FigAlternateHasValidCodecs(void);
void* FigAlternateHasVideo(void);
void* FigAlternateHasVideoDeclared(void);
void* FigAlternateHasVideoFormat(void);
void* FigAlternateIFramesOnlyFilterCreate(void);
void* FigAlternateIsAudioOnly(void);
void* FigAlternateIsFairPlayStreamingVideoAlternate(void);
void* FigAlternateIsIFrameOnly(void);
void* FigAlternateLowPowerModeFilterCreate(void);
void* FigAlternateLowestVideoThenAudioFilterCreate(void);
void* FigAlternateMediaSelectionAudibleFilterCreate(void);
void* FigAlternateMediaValidationFilterCreate(void);
void* FigAlternateMeetsVideoChoice(void);
void* FigAlternateNextHighestPeakBitRateFilterCreate(void);
void* FigAlternateNormalizedPeakBitRateCapFilterCreate(void);
void* FigAlternateOfflinePlayableForMediaSelectionFilterCreate(void);
void* FigAlternatePreferBestFormatForVideoRangeFilterCreate(void);
void* FigAlternatePreferredAudioFormatFilterCreate(void);
void* FigAlternatePreferredVideoFormatFilterCreate(void);
void* FigAlternateResolutionCapFilterCreate(void);
void* FigAlternateResolutionLowerLimitFilterCreate(void);
void* FigAlternateResolutionUpperLimitFilterCreate(void);
void* FigAlternateSetErrorCategory(void);
void* FigAlternateSetIsFairPlayStreamingVideoAlternate(void);
void* FigAlternateSetLastKnownValueForIsFullyCached(void);
void* FigAlternateSetLateDiscoveredMediaType(void);
void* FigAlternateSetStartupScore(void);
void* FigAlternateShouldBeAvoidedForPlaybackInLPM(void);
void* FigAlternateSpatialAudioFilterCreate(void);
void* FigAlternateStreamVideoQualityIndexToCMVideoDynamicRange(void);
void* FigAlternateSupportedAudioFormatFilterCreate(void);
void* FigAlternateSupportedVideoRangeFilterCreate(void);
void* FigAlternateSuppressAudioOnlyFilterCreate(void);
void* FigAlternateVideoFormatFilterCreate(void);
void* FigAlternateVideoRangeFilterCreate(void);
void* FigAlternateWillPlayIfFairplayProtected(void);
void* FigAssertionCopyProperty(void);
void* FigAssertionSetProperty(void);
void* FigAssetCacheInspectorCreate(void);
void* FigAssetCacheInspectorGetCMBaseObject(void);
void* FigAssetCacheInspectorGetClassID(void);
void* FigAssetCacheInspectorGetTypeID(void);
void* FigAssetCollectionFactoryCreateCollectionWithURL(void);
void* FigAssetCollectionGetCMBaseObject(void);
void* FigAssetCollectionGetClassID(void);
void* FigAssetCollectionGetTypeID(void);
void* FigAssetCopyAssetWithDownloadToken(void);
void* FigAssetCreateWithBlockBuffer(void);
void* FigAssetCreateWithByteStream(void);
void* FigAssetCreateWithFormatReader(void);
void* FigAssetCreateWithMovieProxyData(void);
void* FigAssetCreateWithURL(void);
void* FigAssetDownloadStorageManagementCopyDownloadCompletionDateForAssetAtURL(void);
void* FigAssetDownloadStorageManagementCopyDownloadStartDateForAssetAtURL(void);
void* FigAssetDownloadStorageManagementCopyExpirationDateForAssetAtURL(void);
void* FigAssetDownloadStorageManagementCopyLastPlayedDateForAssetAtURL(void);
void* FigAssetDownloadStorageManagementCopyLastPlayedOutDateForAssetAtURL(void);
void* FigAssetDownloadStorageManagementCopyPriorityForAssetAtURL(void);
void* FigAssetDownloadStorageManagementSetContentTypeForAssetAtURL(void);
void* FigAssetDownloadStorageManagementSetDownloadCompletionDateForAssetAtURL(void);
void* FigAssetDownloadStorageManagementSetDownloadStartDateForAssetAtURL(void);
void* FigAssetDownloadStorageManagementSetExpirationDateForAssetAtURL(void);
void* FigAssetDownloadStorageManagementSetLastPlayedDateForAssetAtURL(void);
void* FigAssetDownloadStorageManagementSetLastPlayedOutDateForAssetAtURL(void);
void* FigAssetDownloadStorageManagementSetPriorityForAssetAtURL(void);
void* FigAssetDownloaderGetCMBaseObject(void);
void* FigAssetDownloaderGetClassID(void);
void* FigAssetDownloaderGetTypeID(void);
void* FigAssetDownloaderRegisterDestinationLocation(void);
void* FigAssetExportSessionCancelExport(void);
void* FigAssetExportSessionCopyProperty(void);
void* FigAssetExportSessionCreateWithAsset(void);
void* FigAssetExportSessionDetermineCompatibilityOfExportPreset(void);
void* FigAssetExportSessionDetermineCompatibleFileTypes(void);
void* FigAssetExportSessionEstimateMaximumDurationWithCompletionHandler(void);
void* FigAssetExportSessionEstimateOutputFileLengthWithCompletionHandler(void);
void* FigAssetExportSessionExportAsynchronously(void);
void* FigAssetExportSessionExportGetPresetsCompatibleWithFigAsset(void);
void* FigAssetExportSessionGetAllPresets(void);
void* FigAssetExportSessionGetAverageVideoBitRateForSourceAndPreset(void);
void* FigAssetExportSessionGetDestinationFrameDurationAndExpectedFrameRate(void);
void* FigAssetExportSessionGetEstimatedOutputFileLength(void);
void* FigAssetExportSessionGetMaximumDuration(void);
void* FigAssetExportSessionGetSettingForFigRemaker(void);
void* FigAssetExportSessionGetTypeID(void);
void* FigAssetExportSessionProperty_GetAudioMix_CFDictionaryValueCallBacks(void);
void* FigAssetExportSessionSetProperty(void);
void* FigAssetExportSessionVideoCompositionCreate(void);
void* FigAssetExportSessionVideoCompositionGetTypeID(void);
void* FigAssetExportSettingsUseHEVCHardwareEncoder(void);
void* FigAssetGetCMBaseObject(void);
void* FigAssetGetClassID(void);
void* FigAssetGetTypeID(void);
void* FigAssetImageGeneratorCreateFromAsset(void);
void* FigAssetImageGeneratorGetClassID(void);
void* FigAssetImageGeneratorGetFigBaseObject(void);
void* FigAssetImageGeneratorGetTypeID(void);
void* FigAssetReaderCreateWithAsset(void);
void* FigAssetReaderCreateWithURLAndFormatReader(void);
void* FigAssetReaderGetClassID(void);
void* FigAssetReaderGetFigBaseObject(void);
void* FigAssetReaderGetTypeID(void);
void* FigAssetTableAddAsset(void);
void* FigAssetTableCopyAsset(void);
void* FigAssetTableRemoveAsset(void);
void* FigAssetTrackGetCMBaseObject(void);
void* FigAssetTrackGetClassID(void);
void* FigAssetTrackGetTypeID(void);
void* FigAssetWriterCreateForWritingFragmentedData(void);
void* FigAssetWriterCreateWithByteStream(void);
void* FigAssetWriterCreateWithURL(void);
void* FigAssetWriterGetClassID(void);
void* FigAssetWriterGetFigBaseObject(void);
void* FigAssetWriterGetTypeID(void);
void* FigAttributePartitionGeneratorAddElement(void);
void* FigAttributePartitionGeneratorCopyPartitionReferences(void);
void* FigAttributePartitionGeneratorCreate(void);
void* FigAttributePartitionGeneratorGetTypeID(void);
void* FigAttributePartitionGeneratorPerformPartitioning(void);
void* FigAudioCompressionOptionsGetPreset(void);
void* FigAudioFileFormatWriterCanFileTypeSupportFormatDescription(void);
void* FigAudioFileFormatWriterCanFileTypeSupportMediaType(void);
void* FigAudioFileFormatWriterCreateWithByteStream(void);
void* FigAudioQueueRenderPipelineCreate(void);
void* FigAudioUnitRenderPipelineCreate(void);
void* FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteria(void);
void* FigBufferedAirPlayAudioRenderPipelineCreate(void);
void* FigBufferedAirPlayOutputCreate(void);
void* FigBufferedAirPlayOutputGetCMBaseObject(void);
void* FigBufferedAirPlayOutputGetClassID(void);
void* FigBufferedAirPlayOutputGetTypeID(void);
void* FigByteFlumeCreateWithHTTP(void);
void* FigByteFlumeCustomURLCreateWithURL(void);
void* FigByteFlumeGetClassID(void);
void* FigByteFlumeGetFigBaseObject(void);
void* FigByteFlumeGetTypeID(void);
void* FigBytePumpCreateForHTTPChunk(void);
void* FigBytePumpCreateForICY(void);
void* FigBytePumpGetClassID(void);
void* FigBytePumpGetFigBaseObject(void);
void* FigBytePumpGetTypeID(void);
void* FigBytePumpRelease(void);
void* FigBytePumpRetain(void);
void* FigByteStreamFactoryCreateStreamFromURL(void);
void* FigByteStreamFactoryCreateStreamFromURLAsync(void);
void* FigByteStreamFactoryCreateStreamFromURLWithOptions(void);
void* FigByteStreamFactoryCreateStreamFromURLWithOptionsAsync(void);
void* FigByteStreamFactorySetCachedFileByteStreamEnable(void);
void* FigByteStreamFactoryTranslateReferenceSecurityOptions(void);
void* FigCDSLayoutContextCreate(void);
void* FigCDSLayoutContextGetMapping(void);
void* FigCDSLayoutContextGetSubtitleSample(void);
void* FigCDSLayoutContextGetTypeID(void);
void* FigCDSLayoutContextSetMapping(void);
void* FigCDSLayoutContextSetSubtitleSample(void);
void* FigCDSSessionClear(void);
void* FigCDSSessionCreate(void);
void* FigCDSSessionGetLayoutContext_Overscan(void);
void* FigCDSSessionGetRate(void);
void* FigCDSSessionGetTime(void);
void* FigCDSSessionGetTypeID(void);
void* FigCDSSessionManualTrigger(void);
void* FigCDSSessionSetBitmapCacheRange(void);
void* FigCDSSessionSetBounds(void);
void* FigCDSSessionSetCACFLayerDevice(void);
void* FigCDSSessionSetCALayerDevice(void);
void* FigCDSSessionSetCGContextDevice(void);
void* FigCDSSessionSetCacheBudget(void);
void* FigCDSSessionSetCaptionArray(void);
void* FigCDSSessionSetCaptionCacheRange(void);
void* FigCDSSessionSetCaptionSample(void);
void* FigCDSSessionSetDefaultTextStyle(void);
void* FigCDSSessionSetLayoutContext_Gravity(void);
void* FigCDSSessionSetLayoutContext_Overscan(void);
void* FigCDSSessionSetLayoutContext_VideoSize(void);
void* FigCDSSessionSetLayoutContext_Viewport(void);
void* FigCDSSessionSetLegibleOutputDevice(void);
void* FigCDSSessionSetMasterClock(void);
void* FigCDSSessionSetNonForcedSubtitleDisplay(void);
void* FigCDSSessionSetPlayer(void);
void* FigCDSSessionSetProfile(void);
void* FigCDSSessionSetRate(void);
void* FigCDSSessionSetTime(void);
void* FigCDSSessionSetTimeRange(void);
void* FigCDSSessionStart(void);
void* FigCDSSessionStop(void);
void* FigCDSSessionSynchronizeDefaults(void);
void* FigCDSSessionUpdateCGContext(void);
void* FigCDSSessionUpdateLegibleOutputContext(void);
void* FigCDSSessionUpdateOutput(void);
void* FigCFHTTPCopyClientCertChain(void);
void* FigCFHTTPCreateURLMinusQueryParam(void);
void* FigCFHTTPCreateURLWithQueryParam(void);
void* FigCLCPCaptionConversionValidatorCreate(void);
void* FigCLCPCaptionFormatConformerCreate(void);
void* FigCLCPCaptionGroupConverterFromSampleBufferCreate(void);
void* FigCPECopySessionRecordStorageURLForAppIdentifier(void);
void* FigCPECopySessionRecordsForAppIdentifier(void);
void* FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(void);
void* FigCPEInitializeWithOptions(void);
void* FigCPEIsSupportedFormatDescription(void);
void* FigCPEProtectorCreateForScheme(void);
void* FigCPEProtectorGetClassID(void);
void* FigCPEProtectorGetTypeID(void);
void* FigCPERemoveSessionRecordsForAppIdentifier(void);
void* FigCPESetSessionRecordStorageURLForAppIdentifier(void);
void* FigCPEUninitialize(void);
void* FigCRABSCreate(void);
void* FigCRABSGetByteStream(void);
void* FigCRABSGetClassID(void);
void* FigCRABSScheduledIOCreate(void);
void* FigCaptionCommandCreateFromPropertyList(void);
void* FigCaptionCommandCreatePropertyList(void);
void* FigCaptionConversionValidatorGetCMBaseObject(void);
void* FigCaptionConversionValidatorGetClassID(void);
void* FigCaptionConversionValidatorGetTypeID(void);
void* FigCaptionCreate(void);
void* FigCaptionCreateCopy(void);
void* FigCaptionCreateCopyWithNewTiming(void);
void* FigCaptionCreateMutable(void);
void* FigCaptionCreateMutableCopy(void);
void* FigCaptionFormatConformerGetCMBaseObject(void);
void* FigCaptionFormatConformerGetClassID(void);
void* FigCaptionFormatConformerGetTypeID(void);
void* FigCaptionGetCMBaseObject(void);
void* FigCaptionGetClassID(void);
void* FigCaptionGetTypeID(void);
void* FigCaptionGroupConverterFromSampleBufferGetClassID(void);
void* FigCaptionGroupConverterFromSampleBufferGetTypeID(void);
void* FigCaptionSerializerCopyProperty(void);
void* FigCaptionSerializerCreate(void);
void* FigCaptionSerializerCreateCFDataFromCaptionGroup(void);
void* FigCaptionSerializerCreateCaptionGroupFromCFData(void);
void* FigCaptionSerializerGetTypeID(void);
void* FigCaptionSerializerSetProperty(void);
void* FigCaptionStyleSegmentCopyAttributes(void);
void* FigCaptionStyleSegmentCopyCaptionData(void);
void* FigCaptionStyleSegmentCopyText(void);
void* FigCaptionStyleSegmentGeneratorCreate(void);
void* FigCaptionStyleSegmentGeneratorGetSegmentAtIndex(void);
void* FigCaptionStyleSegmentGeneratorGetSegmentCount(void);
void* FigCaptionStyleSegmentGeneratorGetTypeID(void);
void* FigCaptionStyleSegmentGeneratorPerform(void);
void* FigCaptionStyleSegmentGetTextLength(void);
void* FigCaptionStyleSegmentGetTypeID(void);
void* FigCaptionTimelineGeneratorAddSampleBuffer(void);
void* FigCaptionTimelineGeneratorCreate(void);
void* FigCaptionTimelineGeneratorFinish(void);
void* FigCaptionTimelineGeneratorGetTypeID(void);
void* FigCaptureDeviceGetClassID(void);
void* FigCaptureDeviceGetFigBaseObject(void);
void* FigCaptureDeviceGetNotificationCenter(void);
void* FigCaptureDeviceGetTypeID(void);
void* FigCaptureStreamGetClassID(void);
void* FigCaptureStreamGetFigBaseObject(void);
void* FigCaptureStreamGetTypeID(void);
void* FigCaptureSynchronizedStreamsGroupGetClassID(void);
void* FigCaptureSynchronizedStreamsGroupGetFigBaseObject(void);
void* FigCaptureSynchronizedStreamsGroupGetTypeID(void);
void* FigClosedCaptionsTextRasterizerCreate(void);
void* FigClosedCaptionsTextRasterizerSetCommand(void);
void* FigComputeMovieDimensions(void);
void* FigConsolidateMovieFragments(void);
void* FigContentKeySessionCreateWithCallbacks(void);
void* FigCopyCGColorSRGBAsArray(void);
void* FigCopyMPEGMIMETypes(void);
void* FigCopyQTMovieMIMETypes(void);
void* FigCopySetOfAudioSupportedMIMETypes(void);
void* FigCopySetOfFormatReaderSupportedFileExtensions(void);
void* FigCopySetOfFormatReaderSupportedFileTypes(void);
void* FigCopySetOfFormatReaderSupportedMIMETypes(void);
void* FigCopySetOfFormatReaderSupportedUTIs(void);
void* FigCopySetOfStreamingSupportedMIMETypes(void);
void* FigCopySetOfStreamingSupportedUTIs(void);
void* FigCopyWebVTTMIMETypes(void);
void* FigCoreAnimationRendererCopyPixelBufferAtTime(void);
void* FigCoreAnimationRendererCopyProperty(void);
void* FigCoreAnimationRendererCreate(void);
void* FigCoreAnimationRendererSetProperty(void);
void* FigCoreTextSubtitleRendererCreate(void);
void* FigCreate3x2MatrixArrayFromCGAffineTransform(void);
void* FigCreate3x3MatrixArrayFromCGAffineTransform(void);
void* FigCreateCGColorSRGB(void);
void* FigCreateCGColorSRGBFromArray(void);
void* FigCreateCacheMemoryAllocatorForCRABS(void);
void* FigCreateClosedCaptionRenderPipeline(void);
void* FigCreateHLSfMP4SecurityInfoData(void);
void* FigCreateHLSfMP4SecurityInfoPlaceholderData(void);
void* FigCreateHapticPatternDictionaryFromAppleHapticBBuf(void);
void* FigCreateNullPixelBuffer(void);
void* FigCreateSubtitleRenderPipeline(void);
void* FigDiskCacheProviderGetCFTypeID(void);
void* FigDiskCacheProviderGetClassID(void);
void* FigDiskCacheProviderGetFigBaseObject(void);
void* FigDiskCacheProviderRelease(void);
void* FigDiskCacheProviderRetain(void);
void* FigDiskCacheRepositoryCheckIn(void);
void* FigDiskCacheRepositoryCheckInAndOut(void);
void* FigDiskCacheRepositoryCheckOut(void);
void* FigDiskCacheRepositoryCopyCheckedInIDs(void);
void* FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(void);
void* FigDiskCacheRepositoryCopyDefaultTmpDirURL(void);
void* FigDiskCacheRepositoryCopyInfo(void);
void* FigDiskCacheRepositoryCopyProperty(void);
void* FigDiskCacheRepositoryCreate(void);
void* FigDiskCacheRepositoryDelete(void);
void* FigDiskCacheRepositoryExists(void);
void* FigDiskCacheRepositoryGetFileSize(void);
void* FigDiskCacheRepositoryGetTypeID(void);
void* FigDiskCacheRepositoryMakeRoom(void);
void* FigDiskCacheRepositoryReserveBacking(void);
void* FigDiskCacheRepositorySetTarget(void);
void* FigDisplayModes_BuildColorAndTimingModes(void);
void* FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize(void);
void* FigDisplayModes_CreateColorAndTimingModesArraysWithPreferredMode(void);
void* FigDisplayModes_DetermineSenderSurfaceDimensionsFromDisplayModeAndCurrentSenderDisplaySize(void);
void* FigDisplayModes_ExtractDimensionsFromTimingMode(void);
void* FigDisplayModes_ExtractOverscanInfoFromTimingMode(void);
void* FigDisplayModes_LookupTimingModeIDByIndex(void);
void* FigEditCursorGetClassID(void);
void* FigEditCursorGetFigBaseObject(void);
void* FigEditCursorGetTypeID(void);
void* FigEditCursorServiceGetClassID(void);
void* FigEditCursorServiceGetFigBaseObject(void);
void* FigEditCursorServiceGetTypeID(void);
void* FigEndpointAudioSourceBufferQueueCreate(void);
void* FigExportSettingsAverageBitRateForSourceAndExportPreset(void);
void* FigExportSettingsForExportPreset(void);
void* FigExportSettings_CopyEffectiveColorPropertyForPresetAndInputOutputFormat(void);
void* FigExportSettings_CopyEncoderIDForProfile(void);
void* FigExportSettings_GetMaximumBitsPerComponent(void);
void* FigFastStartRemakerCreateWithURLs(void);
void* FigFileStarByteStreamCreateForFile(void);
void* FigFileStarByteStreamCreateForFileURL(void);
void* FigFileTypeDoesSupportExternalSampleReferences(void);
void* FigFormatReaderCreateForAVCHD(void);
void* FigFormatReaderCreateForStream(void);
void* FigFormatReaderCreateForStreamReturningMatchingContainerLabel(void);
void* FigFormatReaderCreateForStreamReturningResults(void);
void* FigFormatReaderGetClassID(void);
void* FigFormatReaderGetFigBaseObject(void);
void* FigFormatReaderGetTypeID(void);
void* FigFormatWriterGetClassID(void);
void* FigFormatWriterGetFigBaseObject(void);
void* FigFormatWriterGetTypeID(void);
void* FigFullDownloadDiskCacheProviderCreate(void);
void* FigGetCGAffineTransformFrom3x2MatrixArray(void);
void* FigGetCGAffineTransformFrom3x3MatrixArray(void);
void* FigGetIOSurfaceTimingStatsFromTimingInfoDictionary(void);
void* FigGetNotifyingObjectForSupportedFormatsChanged(void);
void* FigGetRotationAngleAndFlipsFromCGAffineTransform(void);
void* FigHLSPersistentStoreCreateAtURL(void);
void* FigHLSPersistentStoreGetClassID(void);
void* FigHLSPersistentStoreGetFigBaseObject(void);
void* FigHLSPersistentStoreGetTypeID(void);
void* FigHLSPersistentStoreRemovePersistentStore(void);
void* FigHLSPersistentStreamInfoGetClassID(void);
void* FigHLSPersistentStreamInfoGetFigBaseObject(void);
void* FigHLSPersistentStreamInfoGetTypeID(void);
void* FigHTTPRequestCreate(void);
void* FigID3MetadataCreateChapterArrayFromTopLevelTableOfContents(void);
void* FigISOUserDataCreateItemDataFromText(void);
void* FigISOUserDataGetOSTypeKeyToStringKeyMapping(void);
void* FigImageQueueCreateForCacheAndFanOut(void);
void* FigImageQueueCreateForCoreAnimation(void);
void* FigImageQueueCreateForCoreVideo(void);
void* FigImageQueueCreateForDiscarding(void);
void* FigImageQueueGetClassID(void);
void* FigImageQueueGetFigBaseObject(void);
void* FigImageQueueGetTypeID(void);
void* FigIsNullPixelBuffer(void);
void* FigLayerSynchronizerCreate(void);
void* FigLayerSynchronizerDestroy(void);
void* FigLayerSynchronizerSetLayerArray(void);
void* FigLayerSynchronizerSynchronizeToMoment(void);
void* FigLayerViewGetCMBaseObject(void);
void* FigLayerViewGetClassID(void);
void* FigLayerViewGetTypeID(void);
void* FigLimitedDiskCacheProviderCreate(void);
void* FigMPEG2ParserAddTransportStreamTrack(void);
void* FigMPEG2ParserCopyProgramList(void);
void* FigMPEG2ParserCopyTrackList(void);
void* FigMPEG2ParserCreate(void);
void* FigMPEG2ParserGetClassID(void);
void* FigMPEG2ParserGetFrameRateForVideoTrack(void);
void* FigMPEG2ParserGetStreamType(void);
void* FigMPEG2ParserGetTimeCodeValueForVideoTrack(void);
void* FigMPEG2ParserGetTypeID(void);
void* FigMPEG2ParserInjectData(void);
void* FigMPEG2ParserInstallCallbacksForTrack(void);
void* FigMPEG2ParserIssueCommands(void);
void* FigMPEG2ParserSetBaseTimestamp(void);
void* FigMPEG2ParserSetDecryptor(void);
void* FigMPEG2ParserSniff(void);
void* FigMPEG2SampleGeneratorCreate(void);
void* FigMPEG2SampleGeneratorDestroy(void);
void* FigMPEG2SampleGeneratorFlush(void);
void* FigMPEG2SampleGeneratorGetTrackBitRate(void);
void* FigMPEG2SampleGeneratorPushFrame(void);
void* FigMPEG2SampleGeneratorResync(void);
void* FigMPEG2SampleGeneratorSetMaxFramesPerSampleBuffer(void);
void* FigManifoldAdjustTimestampAndUpdateRefTime(void);
void* FigManifoldCreateForGap(void);
void* FigManifoldCreateForICY(void);
void* FigManifoldCreateForMPEG2(void);
void* FigManifoldCreateForMovieFragmentStream(void);
void* FigManifoldCreateForWebVTT(void);
void* FigManifoldGetCFTypeID(void);
void* FigManifoldGetClassID(void);
void* FigManifoldGetFigBaseObject(void);
void* FigManifoldRelease(void);
void* FigManifoldRetain(void);
void* FigMediaFileSegmenterCreateWithURL(void);
void* FigMediaFileSegmenterGetClassID(void);
void* FigMediaFileSegmenterGetFigBaseObject(void);
void* FigMediaFileSegmenterGetTypeID(void);
void* FigMediaProcessorCopyPerformanceDictionary(void);
void* FigMediaProcessorCreate(void);
void* FigMediaProcessorCreateForAudioCompression(void);
void* FigMediaProcessorCreateForAudioCompressionWithFormatWriter(void);
void* FigMediaProcessorCreateForAudioDecompressionWithBufferQueue(void);
void* FigMediaProcessorCreateForVideoCompression(void);
void* FigMediaProcessorCreateForVideoCompressionWithFormatWriter(void);
void* FigMediaProcessorCreateForVideoCompressionWithFrameSilo(void);
void* FigMediaProcessorCreateForVideoRotation(void);
void* FigMediaProcessorFlush(void);
void* FigMediaProcessorGetPixelBufferPool(void);
void* FigMediaProcessorGetSampleBufferProcessor(void);
void* FigMediaProcessorGetTypeID(void);
void* FigMediaProcessorGetVTCompressionSession(void);
void* FigMediaProcessorGo(void);
void* FigMediaProcessorInvalidate(void);
void* FigMediaProcessorIsAtEndOfOutputData(void);
void* FigMediaProcessorReset(void);
void* FigMediaProcessorSetProperty(void);
void* FigMediaProcessorStop(void);
void* FigMediaProcessorWaitUntilCompletelyStopped(void);
void* FigMediaValidatorCopyByteStream(void);
void* FigMediaValidatorCopyResolvedURL(void);
void* FigMediaValidatorCreate(void);
void* FigMediaValidatorCreateSync(void);
void* FigMediaValidatorCreateWithByteStream(void);
void* FigMediaValidatorGetMaxFrameRate(void);
void* FigMediaValidatorGetStatus(void);
void* FigMediaValidatorIsNonByteStreamURLStreaming(void);
void* FigMediaValidatorIsNonRefMovieURLStreaming(void);
void* FigMediaValidatorMIMETypeIsShoutcastAudio(void);
void* FigMediaValidatorRelease(void);
void* FigMediaValidatorValidateByteStream(void);
void* FigMediaValidatorValidateFormatDescription(void);
void* FigMediaValidatorValidateIndividualTrack(void);
void* FigMediaValidatorValidateIndividualTrackForDecoding(void);
void* FigMediaValidatorValidateRFC4281CodecsForStreaming(void);
void* FigMediaValidatorValidateRFC4281ExtendedMIMEType(void);
void* FigMediaValidatorValidateRFC4281ExtendedMIMETypeForStreaming(void);
void* FigMediaValidatorValidateURL(void);
void* FigMentorNotificationPayloadCreate(void);
void* FigMetadataArrayCopyItemWithKeyAndIndex(void);
void* FigMetadataArrayCopyKeyAtIndex(void);
void* FigMetadataArrayGetItemCount(void);
void* FigMetadataArrayGetKeyCount(void);
void* FigMetadataArrayHasKey(void);
void* FigMetadataConverterCreateForQuickTime(void);
void* FigMetadataConverterCreateForQuickTimeToFromiTunes(void);
void* FigMetadataConverterGetCFTypeID(void);
void* FigMetadataConverterGetClassID(void);
void* FigMetadataConverterGetFigBaseObject(void);
void* FigMetadataCopyAllMetadataItems(void);
void* FigMetadataCopyCommonMetadataForAVCHD(void);
void* FigMetadataCopyMovieCommonMetadata(void);
void* FigMetadataCopyMovieMetadata(void);
void* FigMetadataCopyTrackCommonMetadata(void);
void* FigMetadataCopyTrackMetadata(void);
void* FigMetadataCreateConverter(void);
void* FigMetadataCreateMetadataItemsFromSampleBuffer(void);
void* FigMetadataCreateSampleBuffer(void);
void* FigMetadataGetAllCommonKeys(void);
void* FigMetadataGetCommonKey(void);
void* FigMetadataGetCoreMediaDataType(void);
void* FigMetadataGetDataTypeWithNamespaceForCoreMediaDataType(void);
void* FigMetadataGetISO639_1FromISO639_2T(void);
void* FigMetadataGetPackedISO639_2TFromLocaleIdentifier(void);
void* FigMetadataReaderCreateForAVCHDMetadata(void);
void* FigMetadataReaderCreateForBoxedMetadata(void);
void* FigMetadataReaderCreateForID3(void);
void* FigMetadataReaderCreateForID3WithBackwardCompatibility(void);
void* FigMetadataReaderCreateForISOUserData(void);
void* FigMetadataReaderCreateForISOUserDataArray(void);
void* FigMetadataReaderCreateForISOUserDataBlockBuffer(void);
void* FigMetadataReaderCreateForQuickTimeMetadata(void);
void* FigMetadataReaderCreateForQuickTimeMetadataArray(void);
void* FigMetadataReaderCreateForQuickTimeUserData(void);
void* FigMetadataReaderCreateForQuickTimeUserDataArray(void);
void* FigMetadataReaderCreateForQuickTimeUserDataBlockBuffer(void);
void* FigMetadataReaderCreateForTimedID3(void);
void* FigMetadataReaderCreateForiTunes(void);
void* FigMetadataReaderCreateForiTunesMetadataArray(void);
void* FigMetadataReaderCreateWithSampleBufferForIcy(void);
void* FigMetadataReaderGetCFTypeID(void);
void* FigMetadataReaderGetClassID(void);
void* FigMetadataReaderGetFigBaseObject(void);
void* FigMetadataReaderRelease(void);
void* FigMetadataReaderRetain(void);
void* FigMetadataRewriterDictionaryCreateFromFigMetadataPropertyArray(void);
void* FigMetadataRewriterSetValues(void);
void* FigMetadataSerializerCreateForISOUserData(void);
void* FigMetadataSerializerCreateForQuickTimeMetadata(void);
void* FigMetadataSerializerCreateForQuickTimeUserData(void);
void* FigMetadataSerializerCreateForiTunes(void);
void* FigMetadataSerializerGetCFTypeID(void);
void* FigMetadataSerializerGetClassID(void);
void* FigMetadataSerializerGetFigBaseObject(void);
void* FigMetadataSerializerGetFigMetadataWriter(void);
void* FigMetadataSerializerRelease(void);
void* FigMetadataSerializerRetain(void);
void* FigMetadataStringKeyToOSTypeKeyWithKeySpace(void);
void* FigMetadataWriterGetCFTypeID(void);
void* FigMetadataWriterGetClassID(void);
void* FigMetadataWriterGetFigBaseObject(void);
void* FigMetadataWriterRelease(void);
void* FigMetadataWriterRetain(void);
void* FigMovieFormatWriterCanFileTypeSupportFormatDescription(void);
void* FigMovieFormatWriterCanFileTypeSupportMediaType(void);
void* FigMovieFormatWriterCreateForWritingMovieFragments(void);
void* FigMovieFormatWriterCreateWithByteStream(void);
void* FigMovieUsesFragments(void);
void* FigMutableCompositionCreate(void);
void* FigMutableCompositionGetClassID(void);
void* FigMutableCompositionGetFigBaseObject(void);
void* FigMutableCompositionGetTypeID(void);
void* FigMutableMovieCreateEmpty(void);
void* FigMutableMovieCreateFromData(void);
void* FigMutableMovieCreateFromFormatReader(void);
void* FigMutableMovieCreateWithURL(void);
void* FigMutableMovieGetClassID(void);
void* FigMutableMovieGetFigBaseObject(void);
void* FigMutableMovieGetTypeID(void);
void* FigNSURLSessionAssertionCreate(void);
void* FigNSURLSessionAssertionGetTypeID(void);
void* FigNeroCreate(void);
void* FigNeroGetTypeID(void);
void* FigNeroSendAudioInputBuffer(void);
void* FigNeroSendMessage(void);
void* FigNeroSetup(void);
void* FigNeroStartStream(void);
void* FigNeroStopStream(void);
void* FigNeroTeardown(void);
void* FigOctaviaVideoRenderPipelineCreate(void);
void* FigOctaviaVideoRenderPipelineCreateWithFigImageQueueArray(void);
void* FigOfflineAudioRenderPipelineCreate(void);
void* FigOutputMonitorIsScreenProbablyBeingRecorded(void);
void* FigParseHLSfMP4SecurityInfoAndCopyIV(void);
void* FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(void);
void* FigPartialSampleTableAccessorCopy(void);
void* FigPartialSampleTableAccessorDestroy(void);
void* FigPartialSampleTableAccessorGetChunkDetails(void);
void* FigPartialSampleTableAccessorGetDependencyInfo(void);
void* FigPartialSampleTableAccessorGetExtendedDependencyAttributeInfo(void);
void* FigPartialSampleTableAccessorGetFormatDescriptionIdentifier(void);
void* FigPartialSampleTableAccessorGetSampleTiming(void);
void* FigPartialSampleTableAccessorGetSyncInfo(void);
void* FigPartialSampleTableAccessorGetUnrefinedSampleLocation(void);
void* FigPartialSampleTableAccessorStep(void);
void* FigPartialSampleTableCreateAccessorAtIndex(void);
void* FigPartialSampleTableCreateForWriting(void);
void* FigPartialSampleTableCreateFromBlockBuffer(void);
void* FigPartialSampleTableFinishWriting(void);
void* FigPartialSampleTableGetTypeID(void);
void* FigPartialSampleTableHelperCreateOutOfBandObjectsFromCompactData(void);
void* FigPartialSampleTableHelperFillCompactDataForOutOfBandObjects(void);
void* FigPartialSampleTableTryAppendSampleInformation(void);
void* FigPhotoAuxiliaryImageMetadataCreateFromXMPData(void);
void* FigPhotoAuxiliaryImageMetadataCreateXMPData(void);
void* FigPhotoCodecSessionPoolCreate(void);
void* FigPhotoCodecSessionPoolCreateCompressionSession(void);
void* FigPhotoCodecSessionPoolCreateDecompressionSession(void);
void* FigPhotoCodecSessionPoolFlush(void);
void* FigPhotoCodecSessionPoolRecycleSession(void);
void* FigPhotoCompressionCreateContainerFromImageExt(void);
void* FigPhotoCompressionCreateDataContainerFromImage(void);
void* FigPhotoCompressionCreateNativePixelFormatArray(void);
void* FigPhotoCompressionDiscardCaches(void);
void* FigPhotoCompressionSessionAddAuxiliaryImage(void);
void* FigPhotoCompressionSessionAddAuxiliaryImageFromDictionaryRepresentation(void);
void* FigPhotoCompressionSessionAddCompressedImage(void);
void* FigPhotoCompressionSessionAddCompressedMovie(void);
void* FigPhotoCompressionSessionAddDebugMetadata(void);
void* FigPhotoCompressionSessionAddExif(void);
void* FigPhotoCompressionSessionAddImage(void);
void* FigPhotoCompressionSessionAddImageToSequence(void);
void* FigPhotoCompressionSessionAddMetadataFromImageProperties(void);
void* FigPhotoCompressionSessionAddThumbnail(void);
void* FigPhotoCompressionSessionAddXMP(void);
void* FigPhotoCompressionSessionCloseContainer(void);
void* FigPhotoCompressionSessionCloseContainerAndCopyBacking(void);
void* FigPhotoCompressionSessionCreate(void);
void* FigPhotoCompressionSessionDiscardCaches(void);
void* FigPhotoCompressionSessionEndImageSequence(void);
void* FigPhotoCompressionSessionGetTypeID(void);
void* FigPhotoCompressionSessionInvalidate(void);
void* FigPhotoCompressionSessionIsContainerOpen(void);
void* FigPhotoCompressionSessionOpenEmptyContainer(void);
void* FigPhotoCompressionSessionOpenExistingContainer(void);
void* FigPhotoCompressionSessionOpenExistingContainerForModification(void);
void* FigPhotoCompressionSessionOpenExistingContainerForModificationF(void);
void* FigPhotoCompressionSessionReleaseHardwareResources(void);
void* FigPhotoCompressionSessionStartImageSequence(void);
void* FigPhotoCompressionSuggestedPaddingForOptions(void);
void* FigPhotoCompressionSupportedForContainerAndCodec(void);
void* FigPhotoCompressionWriteFileContainerFromImage(void);
void* FigPhotoCreateCompressionCompatiblePixelBuffer(void);
void* FigPhotoCreateFractionalPixelBuffer(void);
void* FigPhotoDecompressionContainerCancelAsyncRequest(void);
void* FigPhotoDecompressionContainerCopyAuxiliaryImageBitDepthForIndex(void);
void* FigPhotoDecompressionContainerCopyAuxiliaryImageCGColorSpaceForIndex(void);
void* FigPhotoDecompressionContainerCopyAuxiliaryImageFormatDescriptionForIndex(void);
void* FigPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndex(void);
void* FigPhotoDecompressionContainerCopyAuxiliaryImageSubTypeDataForIndex(void);
void* FigPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndex(void);
void* FigPhotoDecompressionContainerCopyCGColorSpaceForIndex(void);
void* FigPhotoDecompressionContainerCopyDebugMetadataForIndex(void);
void* FigPhotoDecompressionContainerCopyExifForIndex(void);
void* FigPhotoDecompressionContainerCopyFormatDescriptionForIndex(void);
void* FigPhotoDecompressionContainerCopyImageBitDepthForIndex(void);
void* FigPhotoDecompressionContainerCopyImagePropertiesForIndex(void);
void* FigPhotoDecompressionContainerCopyImageSubsamplingForIndex(void);
void* FigPhotoDecompressionContainerCopyThumbnailBitDepthForIndex(void);
void* FigPhotoDecompressionContainerCopyThumbnailFormatDescriptionForIndex(void);
void* FigPhotoDecompressionContainerCopyXMPForIndex(void);
void* FigPhotoDecompressionContainerCreateAuxiliaryImageDictionaryRepresentation(void);
void* FigPhotoDecompressionContainerCreateAuxiliaryImageForIndex(void);
void* FigPhotoDecompressionContainerCreateDictionaryDescription(void);
void* FigPhotoDecompressionContainerCreateImageForIndex(void);
void* FigPhotoDecompressionContainerCreateOutputBufferAttributesForAuxiliaryImageIndex(void);
void* FigPhotoDecompressionContainerCreateOutputBufferAttributesForImageIndex(void);
void* FigPhotoDecompressionContainerCreateOutputBufferAttributesForThumbnailIndex(void);
void* FigPhotoDecompressionContainerCreateSequenceContainer(void);
void* FigPhotoDecompressionContainerCreateThumbnailImageForIndex(void);
void* FigPhotoDecompressionContainerCreateTileIteratorForAuxiliaryImageIndex(void);
void* FigPhotoDecompressionContainerCreateTileIteratorForIndex(void);
void* FigPhotoDecompressionContainerCreateTileIteratorForThumbnailImageIndex(void);
void* FigPhotoDecompressionContainerDecodeImageForIndexAsync(void);
void* FigPhotoDecompressionContainerDecodeImageForIndexAsyncF(void);
void* FigPhotoDecompressionContainerDecodeThumbnailForIndexAsync(void);
void* FigPhotoDecompressionContainerDecodeThumbnailForIndexAsyncF(void);
void* FigPhotoDecompressionContainerDetectSourceIsMIAF(void);
void* FigPhotoDecompressionContainerGetAuxiliaryImageCountForIndex(void);
void* FigPhotoDecompressionContainerGetAuxiliaryImageDimensionsForIndex(void);
void* FigPhotoDecompressionContainerGetAuxiliaryImageGeometryForIndex(void);
void* FigPhotoDecompressionContainerGetAuxiliaryImageTypeForIndex(void);
void* FigPhotoDecompressionContainerGetContainerFormat(void);
void* FigPhotoDecompressionContainerGetDebugMetadataCountForIndex(void);
void* FigPhotoDecompressionContainerGetExifCountForIndex(void);
void* FigPhotoDecompressionContainerGetImageCount(void);
void* FigPhotoDecompressionContainerGetImageGeometryForIndex(void);
void* FigPhotoDecompressionContainerGetPrimaryItemIndex(void);
void* FigPhotoDecompressionContainerGetSequenceCount(void);
void* FigPhotoDecompressionContainerGetThumbnailCountForIndex(void);
void* FigPhotoDecompressionContainerGetThumbnailDimensionsForIndex(void);
void* FigPhotoDecompressionContainerGetThumbnailGeometryForIndex(void);
void* FigPhotoDecompressionContainerGetTypeID(void);
void* FigPhotoDecompressionContainerGetVideoAndAudioCount(void);
void* FigPhotoDecompressionContainerGetXMPCountForIndex(void);
void* FigPhotoDecompressionContainerJFIFTranscode(void);
void* FigPhotoDecompressionContainerPredictTranscodedSize(void);
void* FigPhotoDecompressionCreateCGImageForIndex(void);
void* FigPhotoDecompressionCreateCVPixelBufferForIndex(void);
void* FigPhotoDecompressionCreateNativePixelFormatArray(void);
void* FigPhotoDecompressionDecodeIntoRGBSurfaceForIndex(void);
void* FigPhotoDecompressionDetectContainerFormat(void);
void* FigPhotoDecompressionDetectSourceIsMIAF(void);
void* FigPhotoDecompressionDiscardCaches(void);
void* FigPhotoDecompressionGetImageCount(void);
void* FigPhotoDecompressionGetImageGeometryForIndex(void);
void* FigPhotoDecompressionSessionCreate(void);
void* FigPhotoDecompressionSessionCreateContainer(void);
void* FigPhotoDecompressionSessionDetachSurface(void);
void* FigPhotoDecompressionSessionDiscardCachedBuffers(void);
void* FigPhotoDecompressionSessionGetTypeID(void);
void* FigPhotoDecompressionSessionReleaseHardwareResources(void);
void* FigPhotoDecompressionSessionReserveRequestID(void);
void* FigPhotoDecompressionSessionSupportsCodec(void);
void* FigPhotoDecompressionSupportedForContainerAndCodec(void);
void* FigPhotoDecompressionTileIteratorCancelAsyncRequest(void);
void* FigPhotoDecompressionTileIteratorCopyTileSampleBuffer(void);
void* FigPhotoDecompressionTileIteratorDecodeTileAsync(void);
void* FigPhotoDecompressionTileIteratorDecodeTileAsyncF(void);
void* FigPhotoDecompressionTileIteratorGetTileItemType(void);
void* FigPhotoDecompressionTileIteratorGetTileSourceRect(void);
void* FigPhotoDecompressionTileIteratorGetTypeID(void);
void* FigPhotoDecompressionTileIteratorMoveToPosition(void);
void* FigPhotoDecompressionTileIteratorReset(void);
void* FigPhotoDecompressionTileIteratorStepAndReportPosition(void);
void* FigPhotoDeviceSupportsTileDecodingToCanvas(void);
void* FigPhotoEncoderSupportsPixelFormat(void);
void* FigPhotoGetAPIVersion(void);
void* FigPhotoGetCPUCount(void);
void* FigPhotoGetImageType(void);
void* FigPhotoIsTileDecoderAvailable(void);
void* FigPhotoIsTileEncoderAvailable(void);
void* FigPhotoReleaseHardwareResources(void);
void* FigPhotoScaleAndRotateSessionCreate(void);
void* FigPhotoScaleAndRotateSessionDiscardCaches(void);
void* FigPhotoScaleAndRotateSessionGetTypeID(void);
void* FigPhotoScaleAndRotateSessionTransformForMaxSideLength(void);
void* FigPhotoScaleAndRotateSessionTransformForSize(void);
void* FigPhotoScaleAndRotateSessionTransformIntoCanvas(void);
void* FigPhotoSupportsAVC400Encode(void);
void* FigPhotoSupportsAVCEncode(void);
void* FigPhotoSupportsHEVCEncode(void);
void* FigPhotoSurfacePoolCreate(void);
void* FigPhotoSurfacePoolCreateImageSurface(void);
void* FigPhotoSurfacePoolCreateMemorySurface(void);
void* FigPhotoSurfacePoolCreatePixelBuffer(void);
void* FigPhotoSurfacePoolDetachImageSurface(void);
void* FigPhotoSurfacePoolDetachMemorySurface(void);
void* FigPhotoSurfacePoolDiscardCaches(void);
void* FigPhotoSurfacePoolGetStats(void);
void* FigPhotoSurfacePoolGetTypeID(void);
void* FigPictureCollectionCreateFromByteStream(void);
void* FigPictureCollectionGetCMBaseObject(void);
void* FigPictureCollectionGetClassID(void);
void* FigPictureCollectionGetTypeID(void);
void* FigPictureReaderGetClassID(void);
void* FigPictureReaderGetFigBaseObject(void);
void* FigPictureReaderGetTypeID(void);
void* FigPictureTileCursorGetCMBaseObject(void);
void* FigPictureTileCursorGetClassID(void);
void* FigPictureTileCursorGetTypeID(void);
void* FigPictureTileCursorServiceGetCMBaseObject(void);
void* FigPictureTileCursorServiceGetClassID(void);
void* FigPictureTileCursorServiceGetTypeID(void);
void* FigPlaybackAssertionCreate(void);
void* FigPlaybackAssertionGetTypeID(void);
void* FigPlaybackBossCopyPerformanceDictionary(void);
void* FigPlaybackBossCopyTrackPerformanceDictionary(void);
void* FigPlaybackBossCreate(void);
void* FigPlaybackBossDidReachEnd(void);
void* FigPlaybackBossGetAdvanceTimeForOverlappedPlayback(void);
void* FigPlaybackBossGetAudibleRateRange(void);
void* FigPlaybackBossGetContinuePlayingDuringPrerollForRateChange(void);
void* FigPlaybackBossGetContinuePlayingDuringPrerollForSeek(void);
void* FigPlaybackBossGetDuration(void);
void* FigPlaybackBossGetEndTime(void);
void* FigPlaybackBossGetIFrameOnlySpeedThreshold(void);
void* FigPlaybackBossGetMuted(void);
void* FigPlaybackBossGetRate(void);
void* FigPlaybackBossGetRateSnapping(void);
void* FigPlaybackBossGetReversalLimits(void);
void* FigPlaybackBossGetReverseEndTime(void);
void* FigPlaybackBossGetScheduledEndTime(void);
void* FigPlaybackBossGetScrubPolicy(void);
void* FigPlaybackBossGetStopAtEnd(void);
void* FigPlaybackBossGetTime(void);
void* FigPlaybackBossGetTimebase(void);
void* FigPlaybackBossGetTypeID(void);
void* FigPlaybackBossGetUseIFrameOnlyPlaybackForHighRateScaledEdits(void);
void* FigPlaybackBossGetVolume(void);
void* FigPlaybackBossGoQuiescent(void);
void* FigPlaybackBossInterruptQueueing(void);
void* FigPlaybackBossInvalidate(void);
void* FigPlaybackBossPrerollAndScheduleGaplessStart(void);
void* FigPlaybackBossRefreshVideoComposition(void);
void* FigPlaybackBossRemoveAndAddTracks(void);
void* FigPlaybackBossSendSampleForTime(void);
void* FigPlaybackBossSendSamplesForTimeRange(void);
void* FigPlaybackBossSetAdvanceTimeForOverlappedPlayback(void);
void* FigPlaybackBossSetAudibleRateRange(void);
void* FigPlaybackBossSetClientPID(void);
void* FigPlaybackBossSetContinuePlayingDuringPrerollForRateChange(void);
void* FigPlaybackBossSetContinuePlayingDuringPrerollForSeek(void);
void* FigPlaybackBossSetEndTime(void);
void* FigPlaybackBossSetIFrameOnlySpeedThreshold(void);
void* FigPlaybackBossSetMinimumIntervalForIFrameOnlyPlayback(void);
void* FigPlaybackBossSetMuted(void);
void* FigPlaybackBossSetRate(void);
void* FigPlaybackBossSetRateAndAnchorTime(void);
void* FigPlaybackBossSetRateSnapping(void);
void* FigPlaybackBossSetReversalLimits(void);
void* FigPlaybackBossSetReverseEndTime(void);
void* FigPlaybackBossSetScrubPolicy(void);
void* FigPlaybackBossSetSeekingWaitsForVideoCompositionRendering(void);
void* FigPlaybackBossSetStopAtEnd(void);
void* FigPlaybackBossSetThrottleForBackground(void);
void* FigPlaybackBossSetTime(void);
void* FigPlaybackBossSetTimeWithRange(void);
void* FigPlaybackBossSetTrackList(void);
void* FigPlaybackBossSetUseIFrameOnlyPlaybackForHighRateScaledEdits(void);
void* FigPlaybackBossSetVideoCompositionProcessor(void);
void* FigPlaybackBossSetVolume(void);
void* FigPlaybackBossSnapTimeToIFrame(void);
void* FigPlaybackBossSnapTimeToIFrameWithRange(void);
void* FigPlaybackBossStartPreroll(void);
void* FigPlaybackBossStepByCount(void);
void* FigPlaybackItemGetClassID(void);
void* FigPlaybackItemGetFigBaseObject(void);
void* FigPlaybackItemGetTypeID(void);
void* FigPlaybackItemLogCreateW3CLogData(void);
void* FigPlaybackRateChangeReasonGetDescription(void);
void* FigPlayerAirPlayCreate(void);
void* FigPlayerAirPlayCreateWithOptions(void);
void* FigPlayerAsyncCreate(void);
void* FigPlayerAsyncCreateWithEngineTopology(void);
void* FigPlayerAsyncCreateWithEngineTopologyAndOptions(void);
void* FigPlayerAsyncCreateWithOptions(void);
void* FigPlayerCentralCreate(void);
void* FigPlayerCentralCreateWithOptions(void);
void* FigPlayerFileCreate(void);
void* FigPlayerFileCreateWithOptions(void);
void* FigPlayerGetClassID(void);
void* FigPlayerGetFigBaseObject(void);
void* FigPlayerGetTypeID(void);
void* FigPlayerStreamCreate(void);
void* FigPlayerStreamCreateWithOptions(void);
void* FigPlayerSurrogateCreate(void);
void* FigPlayerSurrogateCreateWithOptions(void);
void* FigPluginByteSourceCreateWithCMByteStream(void);
void* FigPluginByteSourceGetClassID(void);
void* FigPluginByteSourceGetTypeID(void);
void* FigReadAheadAssertionCreate(void);
void* FigReadAheadAssertionGetTypeID(void);
void* FigRemakerCanFileTypeSupportFormatDescription(void);
void* FigRemakerCanFileTypeSupportMediaType(void);
void* FigRemakerCreateBaseWithURLs(void);
void* FigRemakerCreateWithAsset(void);
void* FigRemakerCreateWithURLs(void);
void* FigRemakerGetClassID(void);
void* FigRemakerGetFigBaseObject(void);
void* FigRemakerGetTypeID(void);
void* FigRemakerIsFormatDescriptionProtected(void);
void* FigRenderPipelineCreateForWritingTrack(void);
void* FigRenderPipelineGetClassID(void);
void* FigRenderPipelineGetFigBaseObject(void);
void* FigRenderPipelineGetTypeID(void);
void* FigRewriteMetadata(void);
void* FigSCCFormatWriterCreateWithByteStream(void);
void* FigSTSCreate(void);
void* FigSTSGetCMBaseObject(void);
void* FigSTSGetClassID(void);
void* FigSTSGetTypeID(void);
void* FigSampleBufferAudioRendererAirPlayCreate(void);
void* FigSampleBufferAudioRendererCreateWithOptions(void);
void* FigSampleBufferAudioRendererGetClassID(void);
void* FigSampleBufferAudioRendererGetFigBaseObject(void);
void* FigSampleBufferAudioRendererGetTypeID(void);
void* FigSampleBufferAudioRendererRoutingSessionCreate(void);
void* FigSampleBufferConsumerCreateForBufferQueue(void);
void* FigSampleBufferConsumerGetClassID(void);
void* FigSampleBufferConsumerGetFigBaseObject(void);
void* FigSampleBufferConsumerGetTypeID(void);
void* FigSampleBufferCreateFromFigCaptions(void);
void* FigSampleBufferProcessorAcquireHardware(void);
void* FigSampleBufferProcessorCreateCustomProcessors(void);
void* FigSampleBufferProcessorCreateForCustom(void);
void* FigSampleBufferProcessorCreateForMonochrome(void);
void* FigSampleBufferProcessorCreateForVideoRotation(void);
void* FigSampleBufferProcessorCreateWithAudioCompression(void);
void* FigSampleBufferProcessorCreateWithAudioDecompression(void);
void* FigSampleBufferProcessorCreateWithVTCompressionSession(void);
void* FigSampleBufferProcessorGetClassID(void);
void* FigSampleBufferProcessorGetFigBaseObject(void);
void* FigSampleBufferProcessorGetTypeID(void);
void* FigSampleBufferProcessorGetVTCompressionSession(void);
void* FigSampleBufferProcessorRelinquishHardware(void);
void* FigSampleBufferProviderCreateForBufferQueue(void);
void* FigSampleBufferProviderCreateForVisualContext(void);
void* FigSampleBufferProviderGetClassID(void);
void* FigSampleBufferProviderGetFigBaseObject(void);
void* FigSampleBufferProviderGetTypeID(void);
void* FigSampleBufferRenderSynchronizerCreateWithOptions(void);
void* FigSampleBufferRenderSynchronizerGetClassID(void);
void* FigSampleBufferRenderSynchronizerGetTypeID(void);
void* FigSampleCursorGetClassID(void);
void* FigSampleCursorGetFigBaseObject(void);
void* FigSampleCursorGetTypeID(void);
void* FigSampleCursorServiceGetClassID(void);
void* FigSampleCursorServiceGetFigBaseObject(void);
void* FigSampleCursorServiceGetTypeID(void);
void* FigSampleGeneratorCreateForFormatReaderProducingByteReferenceSampleBuffers(void);
void* FigSampleGeneratorCreateForFormatReaderUsingByteStreams(void);
void* FigSampleGeneratorCreateForFormatReaderUsingScheduledIO(void);
void* FigSampleGeneratorCreateForTrackReaderUsingScheduledIO(void);
void* FigSampleGeneratorDataSourceCacheCreate(void);
void* FigSampleGeneratorGetClassID(void);
void* FigSampleGeneratorGetFigBaseObject(void);
void* FigSampleGeneratorGetTypeID(void);
void* FigSecureStopManagerCopyDefaultRuntimeInstance(void);
void* FigSecureStopManagerCreate(void);
void* FigShared_CopyCacheLastModifiedDate(void);
void* FigShared_CopyDiskCacheCheckedInIDs(void);
void* FigShared_CopyDiskCacheParams(void);
void* FigShared_DeleteFromDiskCache(void);
void* FigShared_GetCacheFileSize(void);
void* FigShared_MakeRoomInDiskCache(void);
void* FigShared_OneTimeInitialization(void);
void* FigShared_SetDiskCacheParams(void);
void* FigSimpleAlternateFilterCreate(void);
void* FigSimpleRenderPipelineCreateWithCallback(void);
void* FigStreamAssetImageGeneratorCreateFromAsset(void);
void* FigStreamAssetImageGeneratorCreateFromAssetWithOptions(void);
void* FigStreamPlaylistDestroy(void);
void* FigStreamPlaylistParse(void);
void* FigStreamPlaylistPredictMediaSequenceAndPartForAdvance(void);
void* FigStreamingAssetDownloaderCreateWithAsset(void);
void* FigStreamingAssetDownloaderCreateWithURL(void);
void* FigStreamingCacheAddMediaMap(void);
void* FigStreamingCacheCleanupStreamsForPersisting(void);
void* FigStreamingCacheCopyChapterArtwork(void);
void* FigStreamingCacheCopyCompletedMediaStreamURLs(void);
void* FigStreamingCacheCopyCryptKey(void);
void* FigStreamingCacheCopyMasterPlaylist(void);
void* FigStreamingCacheCopyMediaMap(void);
void* FigStreamingCacheCopyProperty(void);
void* FigStreamingCacheCopySessionData(void);
void* FigStreamingCacheCreate(void);
void* FigStreamingCacheCreateMediaStream(void);
void* FigStreamingCacheFlushIO(void);
void* FigStreamingCacheGetLongestContiguousMediaStreamInCacheAtTime(void);
void* FigStreamingCacheGetTypeID(void);
void* FigStreamingCacheHintPlaybackTime(void);
void* FigStreamingCacheInvalidate(void);
void* FigStreamingCacheIsMediaStreamInCacheAtTime(void);
void* FigStreamingCacheMediaSegmentAppendBytes(void);
void* FigStreamingCacheMediaSegmentCopyBytes(void);
void* FigStreamingCacheMediaSegmentGetLength(void);
void* FigStreamingCacheMediaSegmentIsComplete(void);
void* FigStreamingCacheMediaSegmentLock(void);
void* FigStreamingCacheMediaSegmentMarkComplete(void);
void* FigStreamingCacheMediaSegmentSetDuplicateSegments(void);
void* FigStreamingCacheMediaSegmentUnlock(void);
void* FigStreamingCacheMediaStreamCopyCachedTimeRanges(void);
void* FigStreamingCacheMediaStreamCopyPersistent(void);
void* FigStreamingCacheMediaStreamCopyPlaylist(void);
void* FigStreamingCacheMediaStreamCreateMediaSegment(void);
void* FigStreamingCacheMediaStreamGetMediaSegmentAtOffset(void);
void* FigStreamingCacheMediaStreamGetMediaSegmentAtTime(void);
void* FigStreamingCacheMediaStreamIsComplete(void);
void* FigStreamingCacheMediaStreamMarkComplete(void);
void* FigStreamingCacheMediaStreamReserveSpaceForByteSize(void);
void* FigStreamingCacheMediaStreamSetPersistent(void);
void* FigStreamingCacheMediaStreamSetPlaylist(void);
void* FigStreamingCacheRemoveMediaMap(void);
void* FigStreamingCacheSetCacheTimeRange(void);
void* FigStreamingCacheSetChapterArtwork(void);
void* FigStreamingCacheSetCryptKey(void);
void* FigStreamingCacheSetMasterPlaylist(void);
void* FigStreamingCacheSetProperty(void);
void* FigStreamingCacheSetSessionData(void);
void* FigSubtitleRendererDrawSubtitleAttributedStringDirect(void);
void* FigSubtitleRendererDrawSubtitleText(void);
void* FigSubtitleRendererDrawSubtitleTextDirect(void);
void* FigSubtitleRendererLayout(void);
void* FigSubtitleRendererNotificationBarrier(void);
void* FigSubtitleRendererUseCoreTextRendererByDefault(void);
void* FigSubtitleSampleCreateFromPropertyList(void);
void* FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(void);
void* FigSubtitleSampleCreatePropertyList(void);
void* FigSubtitleSampleInsertInfoForRenderer(void);
void* FigSubtitleTextRasterizerCreate(void);
void* FigSubtitleTextRasterizerSetSubtitleSample(void);
void* FigSupportsIOSurfaceTimingInfo(void);
void* FigSyncMomentSourceChangeFlagsMask(void);
void* FigSyncMomentSourceCreateWithDispatchQueue(void);
void* FigSyncMomentSourceCreateWithDispatchQueueAndDestructor(void);
void* FigSyncMomentSourceDestroy(void);
void* FigSyncMomentSourceGetTypeID(void);
void* FigSyncMomentSourceSetTimebase(void);
void* FigTTMLAddAttributeToCFDictionary(void);
void* FigTTMLAddCurrentElementAttributesToDictionary(void);
void* FigTTMLAppendDebugDescToCFString(void);
void* FigTTMLCFStringArrayCreateWithNMTOKENS(void);
void* FigTTMLCGColorCopyAsTTMLColorSyntax(void);
void* FigTTMLCGColorCreateWithColorSyntax(void);
void* FigTTMLCMTimeCopyAsClockTimeSyntax(void);
void* FigTTMLCMTimeCopyAsOffsetTimeSyntax(void);
void* FigTTMLCaptionGroupConverterFromSampleBufferCreate(void);
void* FigTTMLCaptionWriterAddCaption(void);
void* FigTTMLCaptionWriterCreateForDocument(void);
void* FigTTMLCaptionWriterFinish(void);
void* FigTTMLCaptionWriterGetClassID(void);
void* FigTTMLCaptionWriterGetTypeID(void);
void* FigTTMLCaptionWriterInvalidate(void);
void* FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(void);
void* FigTTMLCopyRGBAColorAsColorSyntax(void);
void* FigTTMLCopyStringWithDefaultWhitespaceHandling(void);
void* FigTTMLCreateReversedStringArrayFromNMTOKENS(void);
void* FigTTMLCreateStringArrayFromNMTOKENS(void);
void* FigTTMLDivCreate(void);
void* FigTTMLDocumentWriterAddCaptionData(void);
void* FigTTMLDocumentWriterAddText(void);
void* FigTTMLDocumentWriterCopyProperty(void);
void* FigTTMLDocumentWriterCreateForSerializer(void);
void* FigTTMLDocumentWriterCreateForiTT(void);
void* FigTTMLDocumentWriterCreateLanguageIdentifierInserter(void);
void* FigTTMLDocumentWriterCreateLineBreaker(void);
void* FigTTMLDocumentWriterCreateParagraphStyleAttributeInserter(void);
void* FigTTMLDocumentWriterCreateProfileInserter(void);
void* FigTTMLDocumentWriterCreateRegionBuilder(void);
void* FigTTMLDocumentWriterCreateRegionStyleOptimizer(void);
void* FigTTMLDocumentWriterCreateRubySpanBuilder(void);
void* FigTTMLDocumentWriterCreateStyleOptimizer(void);
void* FigTTMLDocumentWriterCreateStyleSpanBuilder(void);
void* FigTTMLDocumentWriterCreateWritingDirectionSpanBuilder(void);
void* FigTTMLDocumentWriterEndElement(void);
void* FigTTMLDocumentWriterFlush(void);
void* FigTTMLDocumentWriterGetCMBaseObject(void);
void* FigTTMLDocumentWriterGetClassID(void);
void* FigTTMLDocumentWriterGetTypeID(void);
void* FigTTMLDocumentWriterInvalidate(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_ActiveArea(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_CellResolution(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_ClipOverflow(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_Decoration(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_DisplayAlign(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_DisplayAspectRatio(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_FillLineGap(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_FontFamily(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_FontSize(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_FontStyle(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_FontWeight(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_ForcedDisplay(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_Hidden(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_Identifier(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_Invisible(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_LineHeight(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_LinePadding(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_MultiRowAlign(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_Opacity(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_Padding(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_Position(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_PreventLineWrapping(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_ShowBackground(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_TextAlign(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_TextColor(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_TextCombine(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_TextOutline(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_WritingDirection(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_WritingMode(void);
void* FigTTMLDocumentWriterMapPropertyToAttribute_ZIndex(void);
void* FigTTMLDocumentWriterMapWidthAndHeightPropertiesToExtentAttributeAndSet(void);
void* FigTTMLDocumentWriterSetAttribute(void);
void* FigTTMLDocumentWriterSetProperty(void);
void* FigTTMLDocumentWriterStartElement(void);
void* FigTTMLFormatWriterCreateWithByteStream(void);
void* FigTTMLGetInheritableStyleAttributeNames(void);
void* FigTTMLGetLibXMLAccess(void);
void* FigTTMLInitializeNodeBaseStorage(void);
void* FigTTMLIntervalTreeAppendActiveNodesToArray(void);
void* FigTTMLIntervalTreeCreate(void);
void* FigTTMLIntervalTreeGetTypeID(void);
void* FigTTMLLayoutCreate(void);
void* FigTTMLLayoutCreateDefault(void);
void* FigTTMLMoveCurrentNodeTo(void);
void* FigTTMLNodeCopyAttributes(void);
void* FigTTMLNodeCopyChildNodeArray(void);
void* FigTTMLNodeCopyNodeValue(void);
void* FigTTMLNodeCopySkippedElementLocalNames(void);
void* FigTTMLNodeGetActiveTimeRange(void);
void* FigTTMLNodeGetClassID(void);
void* FigTTMLNodeGetDocumentOrderIndex(void);
void* FigTTMLNodeGetNodeType(void);
void* FigTTMLNodeGetParameters(void);
void* FigTTMLNodeGetParentNode(void);
void* FigTTMLNodeGetPrecedingNode(void);
void* FigTTMLNodeGetRegionAttributeValue(void);
void* FigTTMLNodeGetTimeContainerSemantics(void);
void* FigTTMLNodeGetTypeID(void);
void* FigTTMLNodeGetXMLID(void);
void* FigTTMLNodeIsAssociatedWithRegionID(void);
void* FigTTMLNodeUseDefaultWhitespaceHandling(void);
void* FigTTMLParseActiveArea(void);
void* FigTTMLParseAndCreateAnimationClassNode(void);
void* FigTTMLParseAndCreateBlockClassNode(void);
void* FigTTMLParseAndCreateInlineClassNode(void);
void* FigTTMLParseCellResolution(void);
void* FigTTMLParseColor(void);
void* FigTTMLParseFontFamilyAndCreateFontFamilyNameList(void);
void* FigTTMLParseFontFamilySyntaxAndCreateFontFamilyNameList(void);
void* FigTTMLParseFrameRate(void);
void* FigTTMLParseFrameRateMultiplier(void);
void* FigTTMLParseLength(void);
void* FigTTMLParseLengthSyntax(void);
void* FigTTMLParseNode(void);
void* FigTTMLParsePixelAspectRatio(void);
void* FigTTMLParsePixelResolution(void);
void* FigTTMLParseTextCombineDigits(void);
void* FigTTMLParseTickRate(void);
void* FigTTMLParseTimeExpression(void);
void* FigTTMLReleaseNodeBaseStorage(void);
void* FigTTMLSerializerAddText(void);
void* FigTTMLSerializerCopyProperty(void);
void* FigTTMLSerializerCreateForByteStream(void);
void* FigTTMLSerializerCreateIndenter(void);
void* FigTTMLSerializerEndElement(void);
void* FigTTMLSerializerFlush(void);
void* FigTTMLSerializerGetClassID(void);
void* FigTTMLSerializerGetTypeID(void);
void* FigTTMLSerializerInvalidate(void);
void* FigTTMLSerializerSetAttribute(void);
void* FigTTMLSerializerSetProperty(void);
void* FigTTMLSerializerStartElement(void);
void* FigTTMLSkipNode(void);
void* FigTTMLSynchronicTreeCopyCSS(void);
void* FigTTMLSynchronicTreeCopyCaptionArray(void);
void* FigTTMLSynchronicTreeCopySSS(void);
void* FigTTMLSynchronicTreeCopyTextNodeArray(void);
void* FigTTMLSynchronicTreeGetTypeID(void);
void* FigTTMLTextCopyContent(void);
void* FigTTMLTextCreate(void);
void* FigTTMLTreeAppendActiveNodesToArray(void);
void* FigTTMLTreeCopyActiveRegionArray(void);
void* FigTTMLTreeCopyFeatureAndExtensionSet(void);
void* FigTTMLTreeCopySliceTimeRangeArray(void);
void* FigTTMLTreeCreate(void);
void* FigTTMLTreeCreateSynchronicTree(void);
void* FigTTMLTreeCreateWithCString(void);
void* FigTTMLTreeGetBodyNode(void);
void* FigTTMLTreeGetNodeByID(void);
void* FigTTMLTreeGetParameters(void);
void* FigTTMLTreeGetRootNode(void);
void* FigTTMLTreeGetTypeID(void);
void* FigTTMLTreeWalkFromNode(void);
void* FigTextMarkupAttributedStringCreateFromPropertyList(void);
void* FigTextRasterizerGetTypeID(void);
void* FigTextSampleBufferCopyText(void);
void* FigThingFind(void);
void* FigTimebaseGetSyncMoment(void);
void* FigTimebaseSynchronizeToMoment(void);
void* FigTimedMetadataRenderPipelineCreate(void);
void* FigTrackReaderGetClassID(void);
void* FigTrackReaderGetFigBaseObject(void);
void* FigTrackReaderGetTypeID(void);
void* FigUserDataGetOSTypeKeyToStringKeyMapping(void);
void* FigVCPCompositorHostAnticipateRendering(void);
void* FigVCPCompositorHostCancelPendingFrames(void);
void* FigVCPCompositorHostComposeFrameAsync(void);
void* FigVCPCompositorHostCopyPerformanceDictionary(void);
void* FigVCPCompositorHostCopyProperty(void);
void* FigVCPCompositorHostCreate(void);
void* FigVCPCompositorHostGetCompositor(void);
void* FigVCPCompositorHostGetCompositorInstanceID(void);
void* FigVCPCompositorHostGetPendingFramesCount(void);
void* FigVCPCompositorHostGetRenderSize(void);
void* FigVCPCompositorHostGetTypeID(void);
void* FigVCPCompositorHostGetUpcomingImageInfo(void);
void* FigVCPCompositorHostInvalidate(void);
void* FigVCPCompositorHostIsAcceptingRequest(void);
void* FigVCPCompositorHostPrepareToCompose(void);
void* FigVCPCompositorHostPrerollForRendering(void);
void* FigVCPCompositorHostSetCompletePrerollCallback(void);
void* FigVCPCompositorHostSetDidReachEndOfOutputCallback(void);
void* FigVCPCompositorHostSetOutputCallback(void);
void* FigVCPCompositorHostSetProperty(void);
void* FigVCPCompositorHostStartAcceptingRequest(void);
void* FigVCPCompositorHostStopAcceptingRequest(void);
void* FigVCPCompositorHostSupportsRenderScale(void);
void* FigVCPCompositorHostWaitForAllPendingFramesToComplete(void);
void* FigVCPCoreAnimationPostProcessorCopyPerformanceDictionary(void);
void* FigVCPCoreAnimationPostProcessorCopyPixelBufferAtTime(void);
void* FigVCPCoreAnimationPostProcessorCreate(void);
void* FigVCPCoreAnimationPostProcessorGetTypeID(void);
void* FigVCPCoreAnimationPostProcessorThrottleForBackground(void);
void* FigVCPCoreAnimationSourceCreate(void);
void* FigVCPDirectionIsBackwardOrPaused(void);
void* FigVCPDirectionIsForwardOrPaused(void);
void* FigVCPGetFoldedTime(void);
void* FigVCPGetFoldedTimeRanges(void);
void* FigVCPInstructionSourceCopyInstructionAtTime(void);
void* FigVCPInstructionSourceCreate(void);
void* FigVCPInstructionSourceGetTypeID(void);
void* FigVCPInstructionSourceInvalidateCache(void);
void* FigVCPInvalidateEpilogue(void);
void* FigVCPInvalidatePrologue(void);
void* FigVCPIsValid(void);
void* FigVCPOutputAllOutputsCanAccomodateFrame(void);
void* FigVCPOutputConformerCopyConformedPixelBuffer(void);
void* FigVCPOutputConformerCopyPerformanceDictionary(void);
void* FigVCPOutputConformerCopyProperty(void);
void* FigVCPOutputConformerCreate(void);
void* FigVCPOutputConformerGetTypeID(void);
void* FigVCPOutputConformerSetProperty(void);
void* FigVCPOutputCreate(void);
void* FigVCPOutputDurationWaterLevelCreate(void);
void* FigVCPOutputDurationWaterLevelGetLowerBound(void);
void* FigVCPOutputDurationWaterLevelGetTypeID(void);
void* FigVCPOutputDurationWaterLevelGetUpperBound(void);
void* FigVCPOutputEnqueueImage(void);
void* FigVCPOutputFlush(void);
void* FigVCPOutputGetOutputDurationWaterLevels(void);
void* FigVCPOutputGetTypeID(void);
void* FigVCPOutputInvalidate(void);
void* FigVCPOutputSetDirection(void);
void* FigVCPOutputSetOutputDurationHighAndLowWaterLevels(void);
void* FigVCPOutputSetUpcomingImageInfo(void);
void* FigVCPOutputWasJustFlushed(void);
void* FigVCPPendingFrameCreate(void);
void* FigVCPPendingFrameGetCompletionStatus(void);
void* FigVCPPendingFrameGetComposedFrame(void);
void* FigVCPPendingFrameGetCompositionStartTime(void);
void* FigVCPPendingFrameGetFoldedFrameTime(void);
void* FigVCPPendingFrameGetFrameTime(void);
void* FigVCPPendingFrameGetOrder(void);
void* FigVCPPendingFrameGetTypeID(void);
void* FigVCPPendingFrameIsImmediateFrame(void);
void* FigVCPPendingFrameReleaseAndClearSourceFrames(void);
void* FigVCPPendingFrameSkipCoreAnimationPostProcessing(void);
void* FigVCPPreprocessParametersCreate(void);
void* FigVCPPreprocessParametersCreateCopy(void);
void* FigVCPPreprocessParametersCreateMutable(void);
void* FigVCPPreprocessParametersGetColorPrimaries(void);
void* FigVCPPreprocessParametersGetPixelBufferAttributes(void);
void* FigVCPPreprocessParametersGetRenderScale(void);
void* FigVCPPreprocessParametersGetTransferFunction(void);
void* FigVCPPreprocessParametersGetTypeID(void);
void* FigVCPPreprocessParametersGetYCbCrMatrix(void);
void* FigVCPPreprocessParametersSetProperty(void);
void* FigVCPProcessingStateAdvanceCurrentTime(void);
void* FigVCPProcessingStateHasReachedTheEnd(void);
void* FigVCPProcessingStateSetCurrentTimeWithSourceFrameTiming(void);
void* FigVCPSourceArrayApplyFunction(void);
void* FigVCPSourceArrayContainsCoreAnimationSource(void);
void* FigVCPSourceArrayCopyAndAddNewCoreAnimationSource(void);
void* FigVCPSourceArrayCopyAndAddNewVisualContext(void);
void* FigVCPSourceArrayCopyPerformanceDictionary(void);
void* FigVCPSourceArrayCreateEmpty(void);
void* FigVCPSourceArrayGetCount(void);
void* FigVCPSourceArrayGetSourceAtIndex(void);
void* FigVCPSourceArrayGetSourceWithTrackID(void);
void* FigVCPSourceArrayGetTypeID(void);
void* FigVCPSourceArrayNoMoreImagesOnAnySource(void);
void* FigVCPSourceCheckImageAvailability(void);
void* FigVCPSourceCopyConformedImage(void);
void* FigVCPSourceCopyPerformanceDictionary(void);
void* FigVCPSourceGetEarliestSequentialImageTimeAfterTime(void);
void* FigVCPSourceGetSourceImageAtCurrentTime(void);
void* FigVCPSourceGetTrackID(void);
void* FigVCPSourceGetTypeID(void);
void* FigVCPSourceHasNoMoreImages(void);
void* FigVCPSourceHoldTriggerUntilAvailabilityChanges(void);
void* FigVCPSourceInvalidate(void);
void* FigVCPSourceSetCurrentTime(void);
void* FigVCPSourceSetPreprocessParameters(void);
void* FigVCPSourceShouldTriggerWhenAvailabilityChanges(void);
void* FigVCPSourceStartOver(void);
void* FigVCPSourceThrottleForBackground(void);
void* FigVCPTallyCopyPerformanceDictionary(void);
void* FigVCPTallyUpdateSkips(void);
void* FigVCPTallyUpdateTimingInfo(void);
void* FigVCPTimingCopyProcessingState(void);
void* FigVCPTimingCopyTimebase(void);
void* FigVCPTimingCreate(void);
void* FigVCPTimingGetLoopTimeRange(void);
void* FigVCPTimingGetOutputFrameDuration(void);
void* FigVCPTimingGetSourceTrackIDForFrameTiming(void);
void* FigVCPTimingGetTypeID(void);
void* FigVCPTimingInvalidate(void);
void* FigVCPTimingIsProcessingStateFresh(void);
void* FigVCPTimingRepeatIdenticalFrames(void);
void* FigVCPTimingResetNextFrameTimeToCurrentTimebaseTime(void);
void* FigVCPTimingSaveProcessingState(void);
void* FigVCPTimingSetLoopTimeRange(void);
void* FigVCPTimingSetTimebase(void);
void* FigVCPTimingStartOver(void);
void* FigVCPTimingUsesTimebase(void);
void* FigVCPVisualContextSourceCreate(void);
void* FigVTTCGColorCopyAsVTTColorSyntax(void);
void* FigVTTCGColorCopyVTTColorAttributeValueAsCSSColorSyntax(void);
void* FigVTTCaptionWriterAddCaption(void);
void* FigVTTCaptionWriterCreateForDocument(void);
void* FigVTTCaptionWriterFinish(void);
void* FigVTTCaptionWriterGetClassID(void);
void* FigVTTCaptionWriterGetTypeID(void);
void* FigVTTCaptionWriterInvalidate(void);
void* FigVTTCopyCMTimeAsTimeStamp(void);
void* FigVTTCopyNodeTypeName(void);
void* FigVTTCopyRGBAColorAsColorSyntax(void);
void* FigVTTCopySectionTypeName(void);
void* FigVTTCueCreate(void);
void* FigVTTDocumentWriterCopyProperty(void);
void* FigVTTDocumentWriterCreateAndAddNode(void);
void* FigVTTDocumentWriterCreateForVTT(void);
void* FigVTTDocumentWriterFlush(void);
void* FigVTTDocumentWriterGetCMBaseObject(void);
void* FigVTTDocumentWriterGetClassID(void);
void* FigVTTDocumentWriterGetTypeID(void);
void* FigVTTDocumentWriterInvalidate(void);
void* FigVTTDocumentWriterMapAttributeToCSS_BackgroundColor(void);
void* FigVTTDocumentWriterMapAttributeToCSS_Decoration(void);
void* FigVTTDocumentWriterMapAttributeToCSS_FontFamily(void);
void* FigVTTDocumentWriterMapAttributeToCSS_FontSize(void);
void* FigVTTDocumentWriterMapAttributeToCSS_FontStyle(void);
void* FigVTTDocumentWriterMapAttributeToCSS_FontWeight(void);
void* FigVTTDocumentWriterMapAttributeToCSS_TextAlign(void);
void* FigVTTDocumentWriterMapAttributeToCSS_TextColor(void);
void* FigVTTDocumentWriterMapAttributeToCSS_WritingMode(void);
void* FigVTTDocumentWriterMapPropertyToAttribute_BackgroundColor(void);
void* FigVTTDocumentWriterMapPropertyToAttribute_Decoration(void);
void* FigVTTDocumentWriterMapPropertyToAttribute_FontFamily(void);
void* FigVTTDocumentWriterMapPropertyToAttribute_FontSize(void);
void* FigVTTDocumentWriterMapPropertyToAttribute_FontStyle(void);
void* FigVTTDocumentWriterMapPropertyToAttribute_FontWeight(void);
void* FigVTTDocumentWriterMapPropertyToAttribute_TextAlign(void);
void* FigVTTDocumentWriterMapPropertyToAttribute_TextColor(void);
void* FigVTTDocumentWriterMapPropertyToAttribute_WritingMode(void);
void* FigVTTDocumentWriterSetProperty(void);
void* FigVTTInitializeNodeBaseStorage(void);
void* FigVTTMetadataCreate(void);
void* FigVTTNodeCopyAttributes(void);
void* FigVTTNodeCopyChildNodeArray(void);
void* FigVTTNodeCopyDocumentSerialization(void);
void* FigVTTNodeCopyProperty(void);
void* FigVTTNodeCopyValue(void);
void* FigVTTNodeGetCMBaseObject(void);
void* FigVTTNodeGetClassID(void);
void* FigVTTNodeGetNodeType(void);
void* FigVTTNodeGetTypeID(void);
void* FigVTTNodeSetAttribute(void);
void* FigVTTNodeSetChildNodeArray(void);
void* FigVTTNodeSetProperty(void);
void* FigVTTNodeSetValue(void);
void* FigVTTNoteBlockCreate(void);
void* FigVTTRegionBlockCreate(void);
void* FigVTTReleaseNodeBaseStorage(void);
void* FigVTTSerializerAddText(void);
void* FigVTTSerializerCopyProperty(void);
void* FigVTTSerializerCreateForByteStream(void);
void* FigVTTSerializerFlush(void);
void* FigVTTSerializerGetClassID(void);
void* FigVTTSerializerGetTypeID(void);
void* FigVTTSerializerInvalidate(void);
void* FigVTTSerializerSetProperty(void);
void* FigVTTSpanCreate(void);
void* FigVTTSpanCreateCopyWithValueRange(void);
void* FigVTTStringifyFigGeometryDimensionAndAppend(void);
void* FigVTTStringifyFigGeometryPointAndAppend(void);
void* FigVTTStyleBlockCreate(void);
void* FigVTTStyleCreate(void);
void* FigVTTStyleGetStyleName(void);
void* FigValeriaGetCMBaseObject(void);
void* FigValeriaGetClassID(void);
void* FigValeriaGetTypeID(void);
void* FigVideoCompositionInstructionArrayIsValid(void);
void* FigVideoCompositionInstructionCopyRequiredTrackIDArrayForTime(void);
void* FigVideoCompositionInstructionEvaluateTweenedAffineMatrix(void);
void* FigVideoCompositionInstructionEvaluateTweenedCropRectangle(void);
void* FigVideoCompositionInstructionEvaluateTweenedOpacity(void);
void* FigVideoCompositionInstructionGetNormalizedTime(void);
void* FigVideoCompositionProcessorCopyProperty(void);
void* FigVideoCompositionProcessorCreateWithImageQueue(void);
void* FigVideoCompositionProcessorCreateWithImageQueueArray(void);
void* FigVideoCompositionProcessorGetTypeID(void);
void* FigVideoCompositionProcessorGetVideoCompositor(void);
void* FigVideoCompositionProcessorGo(void);
void* FigVideoCompositionProcessorInvalidate(void);
void* FigVideoCompositionProcessorIsAtEndOfOutputData(void);
void* FigVideoCompositionProcessorRequestPreroll(void);
void* FigVideoCompositionProcessorResetCompositionInstruction(void);
void* FigVideoCompositionProcessorSetAnimationLayer(void);
void* FigVideoCompositionProcessorSetCompositionInstructionCallback(void);
void* FigVideoCompositionProcessorSetOutputDurationHighAndLowWaterLevels(void);
void* FigVideoCompositionProcessorSetPlaybackTimeRange(void);
void* FigVideoCompositionProcessorSetProperty(void);
void* FigVideoCompositionProcessorSetSourceVisualContext(void);
void* FigVideoCompositionProcessorStartRenderingFramesForTimeRange(void);
void* FigVideoCompositionProcessorStop(void);
void* FigVideoCompositionProcessorWaitUntilCompletelyStopped(void);
void* FigVideoCompositorCreateBasic(void);
void* FigVideoCompositorCreateCustom(void);
void* FigVideoCompositorCreateOpenGL(void);
void* FigVideoCompositorGetClassID(void);
void* FigVideoCompositorGetFigBaseObject(void);
void* FigVideoCompositorGetTypeID(void);
void* FigVideoCompositorUtilityAreCleanAperturesEqual(void);
void* FigVideoCompositorUtilityArePixelAspectRatiosEqual(void);
void* FigVideoCompositorUtilityCopyRenderDimensionsAndEdgeProcessingPixels(void);
void* FigVideoCompositorUtilityCopyRenderPixelBufferDimensionsAndCleanAperture(void);
void* FigVideoCompositorUtilityGetCleanAperture(void);
void* FigVideoCompositorUtilityGetEdgeProcessingPixels(void);
void* FigVideoCompositorUtilityGetPixelAspectRatio(void);
void* FigVideoQueueCreateLocal(void);
void* FigVideoQueueGetCMBaseObject(void);
void* FigVideoQueueGetClassID(void);
void* FigVideoQueueGetTypeID(void);
void* FigVideoRenderPipelineCreateWithFigImageQueueArray(void);
void* FigVideoRenderPipelineCreateWithLKImageQueue(void);
void* FigVideoRenderPipelineCreateWithVisualContext(void);
void* FigVirtualDisplayCopyDefaultTimestampInfo(void);
void* FigVirtualDisplayProcessorAccessoryCreate(void);
void* FigVirtualDisplayProcessorCreate(void);
void* FigVirtualDisplayProcessorGetCMBaseObject(void);
void* FigVirtualDisplayProcessorGetClassID(void);
void* FigVirtualDisplayProcessorGetTypeID(void);
void* FigVirtualDisplaySessionActivate(void);
void* FigVirtualDisplaySessionActivateWithSourceAndSink(void);
void* FigVirtualDisplaySessionCreateWithComponents(void);
void* FigVirtualDisplaySessionCreateWithConfiguration(void);
void* FigVirtualDisplaySessionDeactivate(void);
void* FigVirtualDisplaySessionGetClassID(void);
void* FigVirtualDisplaySessionGetTypeID(void);
void* FigVirtualDisplaySessionIsIdle(void);
void* FigVirtualDisplaySinkConduitCreate(void);
void* FigVirtualDisplaySinkFileWriterCreate(void);
void* FigVirtualDisplaySinkGetCMBaseObject(void);
void* FigVirtualDisplaySinkGetClassID(void);
void* FigVirtualDisplaySinkGetTypeID(void);
void* FigVirtualDisplaySourceGetCMBaseObject(void);
void* FigVirtualDisplaySourceGetClassID(void);
void* FigVirtualDisplaySourceGetTypeID(void);
void* FigVirtualDisplaySourceMovieCreate(void);
void* FigVirtualDisplaySourceNullCreate(void);
void* FigVirtualDisplaySourceScreenGetCGPerformanceData(void);
void* FigVirtualDisplaySourceScreenGetCurrent(void);
void* FigVisualContextBecameEmpty(void);
void* FigVisualContextConvertHostTimeToImageTime(void);
void* FigVisualContextCopyImageForTime(void);
void* FigVisualContextCopyImageForTime2(void);
void* FigVisualContextCreateBasic(void);
void* FigVisualContextCreateDerived(void);
void* FigVisualContextGetEarliestSequentialImageTime(void);
void* FigVisualContextGetEarliestSequentialImageTimeAfterTime(void);
void* FigVisualContextGetTypeID(void);
void* FigVisualContextImageAvailableImmediate(void);
void* FigVisualContextImageAvailableSequential(void);
void* FigVisualContextInvalidate(void);
void* FigVisualContextIsNewImageAvailable(void);
void* FigVisualContextNoMoreImages(void);
void* FigVisualContextRelease(void);
void* FigVisualContextRetain(void);
void* FigVisualContextSetBecameEmptyCallback(void);
void* FigVisualContextSetImageAvailableImmediateCallback(void);
void* FigVisualContextSetImageAvailableSequentialCallback(void);
void* FigVisualContextSetNoMoreImagesCallback(void);
void* FigVisualContextSetProducerCallbacks(void);
void* FigVisualContextTask(void);
void* FigWebVTTFormatWriterCreateWithByteStream(void);
void* FigWriteHLSfMP4SecurityInfoIncludingAtomHeader(void);
void* FigWriteHLSfMP4SecurityInfoPlaceholderIncludingAtomHeader(void);
void* FigiTunesMetadataGetOSTypeKeyToShortStringKeyMapping(void);
void* IFFParseFileTypeAtom(void);
void* IsReferenceMovie(void);
void* MTAudioProcessingTapCreate(void);
void* MTAudioProcessingTapGetSourceAudio(void);
void* MTAudioProcessingTapGetStorage(void);
void* MTAudioProcessingTapGetTypeID(void);
void* MTCapabilityIsAvailable(void);
void* MTConvertCaptionStyleDataFromCSSToCMTextMarkup(void);
void* MTCopyImageDataForAssetAtURL(void);
void* MTCopyLocalizedNameForMediaSubType(void);
void* MTCopyLocalizedNameForMediaType(void);
void* MTCopyLocalizedStringForVideoDynamicRange(void);
void* MTCopyNameForAssetAtURL(void);
void* MTCopyStringForColorInfo(void);
void* MTCopyStringsForMediaTypeAndSubType(void);
void* MTCreate3x3MatrixArrayFromCGAffineTransform(void);
void* MTEnableCaption2015Behavior(void);
void* MTGetCGAffineTransformFrom3x3MatrixArray(void);
void* MTGetCaption2015Behavior(void);
void* MTGetDefaultStreamingHDRLowPowerPreference(void);
void* MTGetMaxRecommendedResolutionForTVApp(void);
void* MTGetStreamingHDRLowPowerPreference(void);
void* MTOverrideShouldPlayHDRVideo(void);
void* MTPluginByteSourceCopyFileName(void);
void* MTPluginByteSourceCopyFileNamesInRelativeDirectory(void);
void* MTPluginByteSourceCopyTypeIdentifier(void);
void* MTPluginByteSourceCreateAuxiliaryByteSource(void);
void* MTPluginByteSourceGetLength(void);
void* MTPluginByteSourceGetTypeID(void);
void* MTPluginByteSourceRead(void);
void* MTPluginFormatReaderCreateWithFigPluginByteSourceAndInstantiationFunction(void);
void* MTPluginFormatReaderDisableSandboxing(void);
void* MTPluginFormatReaderGetCMBaseObject(void);
void* MTPluginFormatReaderGetClassID(void);
void* MTPluginFormatReaderGetTypeID(void);
void* MTPluginFormatReader_XPCServiceConnectionHandler(void);
void* MTPluginMetadataItemCopyProperties(void);
void* MTPluginMetadataItemCreate(void);
void* MTPluginMetadataItemCreateWithProperties(void);
void* MTPluginMetadataItemGetDataType(void);
void* MTPluginMetadataItemGetExtendedLanguageTag(void);
void* MTPluginMetadataItemGetInfo(void);
void* MTPluginMetadataItemGetKey(void);
void* MTPluginMetadataItemGetTypeID(void);
void* MTPluginMetadataItemGetValue(void);
void* MTPluginMetadataItemSetDataType(void);
void* MTPluginMetadataItemSetExtendedLanguageTag(void);
void* MTPluginMetadataItemSetInfo(void);
void* MTPluginMetadataItemSetKey(void);
void* MTPluginMetadataItemSetValue(void);
void* MTPluginSampleCursorGetCMBaseObject(void);
void* MTPluginSampleCursorGetClassID(void);
void* MTPluginSampleCursorGetTypeID(void);
void* MTPluginTrackReaderGetCMBaseObject(void);
void* MTPluginTrackReaderGetClassID(void);
void* MTPluginTrackReaderGetTypeID(void);
void* MTRegisterPluginFormatReaderBundleDirectory(void);
void* MTRegisterProfessionalVideoWorkflowFormatReaders(void);
void* MTSetStreamingHDRLowPowerPreference(void);
void* MTShouldPlayHDRVideo(void);
void* MT_GetShouldPlayHDRVideoNotificationSingleton(void);
void* MovieProxyDataCreateForByteStream(void);
void* MovieUsesFragments(void);
void* ObtainCFDataSinfsFromMedia(void);
void* ObtainSinfInfoFromMedia(void);
void* PKDCopyCryptKeyIdentifiersFromPSSH(void);
void* PKDCopyDecryptFormatTypeFromCodecType(void);
void* PKDCopyDefaultKeyIDFromSinfArray(void);
void* PKDCopyKeyIDAndAssetIDFromPSSH(void);
void* PKDPersistentKeyIsForCTRModeDecryption(void);
void* PostProcessPurchasedItem(void);
void* QTMovieFormatReaderCreateFromStream(void);
void* RTMCopyGeneralMetrics(void);
void* RTMFreeRecording(void);
void* RTMReadResultsFromFile(void);
void* RTMStartGeneralRecording(void);
void* RTMWriteResultsToFile(void);
void* ResolveReferenceMovie(void);
void* ResolveReferenceMovieWithOptions(void);
void* SlimVideoDecoder_CreateInstance(void);
void* SlimVideoEncoder_CreateInstance(void);
void* TTMLParserCreate(void);
void* TTMLParserGetTypeID(void);
void* TTMLParserParseStream(void);
void* TTMLParserRegisterReportingCallbacks(void);
void* VMC2CopyPerformanceDictionary(void);
void* VMC2CopyProperty(void);
void* VMC2CreateWithCallbacks(void);
void* VMC2CreateWithQueues(void);
void* VMC2CreateWithQueues2(void);
void* VMC2GetTypeID(void);
void* VMC2Go(void);
void* VMC2Invalidate(void);
void* VMC2IsAtEndOfOutputData(void);
void* VMC2MakeOutputCallbacksForImageQueueArray(void);
void* VMC2PretendOutputIsLow(void);
void* VMC2RequestDecodeForPreroll(void);
void* VMC2Reset(void);
void* VMC2SetMinUpcomingPresentationTimeStamp(void);
void* VMC2SetProperty(void);
void* VMC2SetTimebase(void);
void* VMC2Stop(void);
void* VMC2WaitUntilCompletelyStopped(void);
void* VMC2WaitUntilPrerolled(void);
void* VideoMentorCopyPerformanceDictionary(void);
void* VideoMentorDispose(void);
void* VideoMentorInvalidate(void);
void* VideoMentorNew(void);
void* VideoMentorSetClientPID(void);
void* VideoMentorSetModeToDoNothing(void);
void* VideoMentorSetModeToEmptyEdit(void);
void* VideoMentorSetModeToForwardPlayback(void);
void* VideoMentorSetModeToReversePlayback(void);
void* VideoMentorSetModeToScrub(void);
void* VideoMentorSetProperty(void);
void* VideoMentorSetThrottleForBackground(void);
void* VideoMentorSetTimeRemapCallback(void);
void* fpSupport_createDefaultGaplessDictionary(void);

#endif
